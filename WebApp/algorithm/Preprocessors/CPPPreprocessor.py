# Author(s) : Conor Cowley, Xavier Parnell
from antlr4 import InputStream, CommonTokenStream

from algorithm.Preprocessors.Preprocessor import Preprocessor
from algorithm.Parsers.CPPParser.CPP14Lexer import CPP14Lexer
from algorithm.Parsers.CPPParser.CPP14Parser import CPP14Parser
from algorithm.Parsers.CPPParser.CPP14ParserVisitor import CPP14ParserVisitor
# PREPROCESSOR FOR C++
class CPPPreprocessor(Preprocessor):
    
    #The `preprocessCode` method removes preprocessor directives from code, as well as unnecessary characters"""
    def preprocess(self):
        lexer = CPP14Lexer(InputStream(self.file))
        stream = CommonTokenStream(lexer) # stream of common tokens are generated
        parser = CPP14Parser(stream) # Generate a parser which uses the common stream of tokens generated by the lexer
        self.tree = parser.translationUnit() # Finally, the tree is generated
        self.removeTreeNoise()
        self.processed_str = self.tree.getText() # Retrieve the text of the preprocessed code


    #The `removeTreeNoise` function aims to remove unnecessary noise such as print statements that could potentially impact the accuracy of the algorithm.
    def removeTreeNoise(self):
        #This may be needed if ANTLR cannot remove the noise for us.
        visitor = CPP14ParserVisitor()
        
        visitor.visit(self.tree)
        pass