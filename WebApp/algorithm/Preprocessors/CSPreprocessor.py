# Author(s) : Conor Cowley
from antlr4 import InputStream, CommonTokenStream

from algorithm.Preprocessors.Preprocessor import Preprocessor
from algorithm.Parsers.CSParser.CSharpLexer import CSharpLexer
from algorithm.Parsers.CSParser.CSharpParser import CSharpParser
from algorithm.Parsers.CSParser.CSharpParserVisitor import CSharpParserVisitor

# PREPROCESSOR FOR C#
class CSPreprocessor(Preprocessor):
    
    #The `preprocessCode` method removes preprocessor directives from code, as well as unnecessary characters.
    def preprocess(self):
        lexer = CSharpLexer(InputStream(self.file))
        stream = CommonTokenStream(lexer) # stream of common tokens are generated.
        parser = CSharpParser(stream) #Generate a parser which uses the common stream of tokens generated by the lexer.
        self.tree = parser.compilation_unit()
        self.removeTreeNoise()
        self.processed_str = self.tree.getText()

    #The `removeTreeNoise` function aims to remove unnecessary noise such as print statements that could potentially impact the accuracy of the algorithm.
    def removeTreeNoise(self):
        visitor = CSharpParserVisitor()
        visitor.visit(self.tree)
