# Generated from Python3Parser.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

#if __name__ is not None and "." in __name__:
#    from .Python3ParserBase import Python3ParserBase
#else:
#    from Python3ParserBase import Python3ParserBase

from algorithm.Parsers.PyParser.Python3ParserBase import Python3ParserBase

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3h")
        buf.write("\u05c1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\3\2\3\2\3\2\3")
        buf.write("\2\3\2\5\2\u0104\n\2\3\3\3\3\7\3\u0108\n\3\f\3\16\3\u010b")
        buf.write("\13\3\3\3\3\3\3\4\3\4\7\4\u0111\n\4\f\4\16\4\u0114\13")
        buf.write("\4\3\4\3\4\3\5\3\5\3\5\3\5\5\5\u011c\n\5\3\5\5\5\u011f")
        buf.write("\n\5\3\5\3\5\3\6\6\6\u0124\n\6\r\6\16\6\u0125\3\7\3\7")
        buf.write("\3\7\3\7\5\7\u012c\n\7\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t")
        buf.write("\5\t\u0136\n\t\3\t\3\t\3\t\3\n\3\n\5\n\u013d\n\n\3\n\3")
        buf.write("\n\3\13\3\13\3\13\5\13\u0144\n\13\3\13\3\13\3\13\3\13")
        buf.write("\5\13\u014a\n\13\7\13\u014c\n\13\f\13\16\13\u014f\13\13")
        buf.write("\3\13\3\13\3\13\5\13\u0154\n\13\3\13\3\13\3\13\3\13\5")
        buf.write("\13\u015a\n\13\7\13\u015c\n\13\f\13\16\13\u015f\13\13")
        buf.write("\3\13\3\13\3\13\3\13\5\13\u0165\n\13\5\13\u0167\n\13\5")
        buf.write("\13\u0169\n\13\3\13\3\13\3\13\5\13\u016e\n\13\5\13\u0170")
        buf.write("\n\13\5\13\u0172\n\13\3\13\3\13\5\13\u0176\n\13\3\13\3")
        buf.write("\13\3\13\3\13\5\13\u017c\n\13\7\13\u017e\n\13\f\13\16")
        buf.write("\13\u0181\13\13\3\13\3\13\3\13\3\13\5\13\u0187\n\13\5")
        buf.write("\13\u0189\n\13\5\13\u018b\n\13\3\13\3\13\3\13\5\13\u0190")
        buf.write("\n\13\5\13\u0192\n\13\3\f\3\f\3\f\5\f\u0197\n\f\3\r\3")
        buf.write("\r\3\r\5\r\u019c\n\r\3\r\3\r\3\r\3\r\5\r\u01a2\n\r\7\r")
        buf.write("\u01a4\n\r\f\r\16\r\u01a7\13\r\3\r\3\r\3\r\5\r\u01ac\n")
        buf.write("\r\3\r\3\r\3\r\3\r\5\r\u01b2\n\r\7\r\u01b4\n\r\f\r\16")
        buf.write("\r\u01b7\13\r\3\r\3\r\3\r\3\r\5\r\u01bd\n\r\5\r\u01bf")
        buf.write("\n\r\5\r\u01c1\n\r\3\r\3\r\3\r\5\r\u01c6\n\r\5\r\u01c8")
        buf.write("\n\r\5\r\u01ca\n\r\3\r\3\r\5\r\u01ce\n\r\3\r\3\r\3\r\3")
        buf.write("\r\5\r\u01d4\n\r\7\r\u01d6\n\r\f\r\16\r\u01d9\13\r\3\r")
        buf.write("\3\r\3\r\3\r\5\r\u01df\n\r\5\r\u01e1\n\r\5\r\u01e3\n\r")
        buf.write("\3\r\3\r\3\r\5\r\u01e8\n\r\5\r\u01ea\n\r\3\16\3\16\3\17")
        buf.write("\3\17\5\17\u01f0\n\17\3\20\3\20\3\20\7\20\u01f5\n\20\f")
        buf.write("\20\16\20\u01f8\13\20\3\20\5\20\u01fb\n\20\3\20\3\20\3")
        buf.write("\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u0207\n\21")
        buf.write("\3\22\3\22\3\22\3\22\3\22\5\22\u020e\n\22\3\22\3\22\3")
        buf.write("\22\5\22\u0213\n\22\7\22\u0215\n\22\f\22\16\22\u0218\13")
        buf.write("\22\5\22\u021a\n\22\3\23\3\23\3\23\3\23\5\23\u0220\n\23")
        buf.write("\3\24\3\24\5\24\u0224\n\24\3\24\3\24\3\24\5\24\u0229\n")
        buf.write("\24\7\24\u022b\n\24\f\24\16\24\u022e\13\24\3\24\5\24\u0231")
        buf.write("\n\24\3\25\3\25\3\26\3\26\3\26\3\27\3\27\3\30\3\30\3\30")
        buf.write("\3\30\3\30\5\30\u023f\n\30\3\31\3\31\3\32\3\32\3\33\3")
        buf.write("\33\5\33\u0247\n\33\3\34\3\34\3\35\3\35\3\35\3\35\5\35")
        buf.write("\u024f\n\35\5\35\u0251\n\35\3\36\3\36\5\36\u0255\n\36")
        buf.write("\3\37\3\37\3\37\3 \3 \7 \u025c\n \f \16 \u025f\13 \3 ")
        buf.write("\3 \6 \u0263\n \r \16 \u0264\5 \u0267\n \3 \3 \3 \3 \3")
        buf.write(" \3 \3 \5 \u0270\n \3!\3!\3!\5!\u0275\n!\3\"\3\"\3\"\5")
        buf.write("\"\u027a\n\"\3#\3#\3#\7#\u027f\n#\f#\16#\u0282\13#\3#")
        buf.write("\5#\u0285\n#\3$\3$\3$\7$\u028a\n$\f$\16$\u028d\13$\3%")
        buf.write("\3%\3%\7%\u0292\n%\f%\16%\u0295\13%\3&\3&\3&\3&\7&\u029b")
        buf.write("\n&\f&\16&\u029e\13&\3\'\3\'\3\'\3\'\7\'\u02a4\n\'\f\'")
        buf.write("\16\'\u02a7\13\'\3(\3(\3(\3(\5(\u02ad\n(\3)\3)\3)\3)\3")
        buf.write(")\3)\3)\3)\3)\3)\5)\u02b9\n)\3*\3*\3*\3*\5*\u02bf\n*\3")
        buf.write("+\3+\3+\3+\3+\3+\3+\3+\3+\7+\u02ca\n+\f+\16+\u02cd\13")
        buf.write("+\3+\3+\3+\5+\u02d2\n+\3,\3,\3,\3,\3,\3,\3,\5,\u02db\n")
        buf.write(",\3-\3-\3-\3-\3-\3-\3-\3-\3-\5-\u02e6\n-\3.\3.\3.\3.\3")
        buf.write(".\3.\3.\6.\u02ef\n.\r.\16.\u02f0\3.\3.\3.\5.\u02f6\n.")
        buf.write("\3.\3.\3.\5.\u02fb\n.\3.\3.\3.\5.\u0300\n.\3/\3/\3/\3")
        buf.write("/\7/\u0306\n/\f/\16/\u0309\13/\3/\3/\3/\3\60\3\60\3\60")
        buf.write("\5\60\u0311\n\60\3\61\3\61\3\61\3\61\5\61\u0317\n\61\5")
        buf.write("\61\u0319\n\61\3\62\3\62\3\62\3\62\6\62\u031f\n\62\r\62")
        buf.write("\16\62\u0320\3\62\3\62\5\62\u0325\n\62\3\63\3\63\3\63")
        buf.write("\3\63\3\63\3\63\6\63\u032d\n\63\r\63\16\63\u032e\3\63")
        buf.write("\3\63\3\64\3\64\3\64\5\64\u0336\n\64\3\64\5\64\u0339\n")
        buf.write("\64\3\65\3\65\6\65\u033d\n\65\r\65\16\65\u033e\3\65\5")
        buf.write("\65\u0342\n\65\3\66\3\66\3\66\5\66\u0347\n\66\3\67\3\67")
        buf.write("\3\67\5\67\u034c\n\67\3\67\3\67\3\67\38\38\38\39\39\5")
        buf.write("9\u0356\n9\3:\3:\5:\u035a\n:\3;\3;\3;\3;\3<\3<\3<\7<\u0363")
        buf.write("\n<\f<\16<\u0366\13<\3=\3=\3=\3=\3=\3=\3=\3=\5=\u0370")
        buf.write("\n=\3>\3>\3>\3>\3>\3>\3>\3>\5>\u037a\n>\3?\3?\3?\3?\3")
        buf.write("?\3?\3?\3?\5?\u0384\n?\3@\3@\3@\3@\3@\3@\3@\3@\5@\u038e")
        buf.write("\n@\3A\3A\3A\5A\u0393\nA\3B\3B\3B\5B\u0398\nB\3C\3C\3")
        buf.write("D\3D\3E\3E\3F\3F\3F\3G\3G\3H\3H\3H\3I\3I\3I\6I\u03ab\n")
        buf.write("I\rI\16I\u03ac\3J\3J\5J\u03b1\nJ\3K\3K\3K\3K\3L\3L\5L")
        buf.write("\u03b9\nL\3L\3L\3L\5L\u03be\nL\3L\5L\u03c1\nL\3M\3M\3")
        buf.write("M\5M\u03c6\nM\3N\3N\3N\7N\u03cb\nN\fN\16N\u03ce\13N\3")
        buf.write("N\5N\u03d1\nN\3O\3O\5O\u03d5\nO\3P\3P\3P\3P\5P\u03db\n")
        buf.write("P\3Q\3Q\3Q\3Q\3Q\5Q\u03e2\nQ\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u03eb")
        buf.write("\nQ\3Q\3Q\3Q\3Q\3Q\5Q\u03f2\nQ\3Q\3Q\5Q\u03f6\nQ\3R\3")
        buf.write("R\3R\7R\u03fb\nR\fR\16R\u03fe\13R\3S\3S\5S\u0402\nS\3")
        buf.write("S\3S\3S\3T\3T\3T\3U\3U\3U\3U\3U\3U\3U\3U\5U\u0412\nU\3")
        buf.write("U\3U\3U\3U\3U\3U\5U\u041a\nU\3U\3U\3U\3U\3U\3U\3U\3U\5")
        buf.write("U\u0424\nU\3U\3U\5U\u0428\nU\3V\3V\3V\7V\u042d\nV\fV\16")
        buf.write("V\u0430\13V\3W\3W\3W\7W\u0435\nW\fW\16W\u0438\13W\3X\3")
        buf.write("X\3X\3X\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u0444\nY\3Y\5Y\u0447\nY\3")
        buf.write("Z\3Z\5Z\u044b\nZ\3[\3[\5[\u044f\n[\3[\3[\3[\3\\\3\\\5")
        buf.write("\\\u0456\n\\\3\\\3\\\3\\\3]\3]\3]\7]\u045e\n]\f]\16]\u0461")
        buf.write("\13]\3^\3^\3^\7^\u0466\n^\f^\16^\u0469\13^\3_\3_\3_\5")
        buf.write("_\u046e\n_\3`\3`\3`\3`\7`\u0474\n`\f`\16`\u0477\13`\3")
        buf.write("a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\5a\u0486\na\3b\3")
        buf.write("b\3b\3c\3c\3c\7c\u048e\nc\fc\16c\u0491\13c\3d\3d\3d\7")
        buf.write("d\u0496\nd\fd\16d\u0499\13d\3e\3e\3e\7e\u049e\ne\fe\16")
        buf.write("e\u04a1\13e\3f\3f\3f\7f\u04a6\nf\ff\16f\u04a9\13f\3g\3")
        buf.write("g\3g\7g\u04ae\ng\fg\16g\u04b1\13g\3h\3h\3h\7h\u04b6\n")
        buf.write("h\fh\16h\u04b9\13h\3i\3i\3i\5i\u04be\ni\3j\3j\3j\5j\u04c3")
        buf.write("\nj\3k\5k\u04c6\nk\3k\3k\7k\u04ca\nk\fk\16k\u04cd\13k")
        buf.write("\3l\3l\3l\5l\u04d2\nl\3l\3l\3l\5l\u04d7\nl\3l\3l\3l\5")
        buf.write("l\u04dc\nl\3l\3l\3l\3l\6l\u04e2\nl\rl\16l\u04e3\3l\3l")
        buf.write("\3l\3l\5l\u04ea\nl\3m\3m\3n\3n\5n\u04f0\nn\3n\3n\3n\3")
        buf.write("n\5n\u04f6\nn\7n\u04f8\nn\fn\16n\u04fb\13n\3n\5n\u04fe")
        buf.write("\nn\5n\u0500\nn\3o\3o\5o\u0504\no\3o\3o\3o\3o\3o\3o\3")
        buf.write("o\5o\u050d\no\3p\3p\3p\7p\u0512\np\fp\16p\u0515\13p\3")
        buf.write("p\5p\u0518\np\3q\3q\5q\u051c\nq\3q\3q\5q\u0520\nq\3q\5")
        buf.write("q\u0523\nq\5q\u0525\nq\3r\3r\5r\u0529\nr\3s\3s\5s\u052d")
        buf.write("\ns\3s\3s\3s\5s\u0532\ns\7s\u0534\ns\fs\16s\u0537\13s")
        buf.write("\3s\5s\u053a\ns\3t\3t\3t\7t\u053f\nt\ft\16t\u0542\13t")
        buf.write("\3t\5t\u0545\nt\3u\3u\3u\3u\3u\3u\5u\u054d\nu\3u\3u\3")
        buf.write("u\3u\3u\3u\3u\3u\5u\u0557\nu\7u\u0559\nu\fu\16u\u055c")
        buf.write("\13u\3u\5u\u055f\nu\5u\u0561\nu\3u\3u\5u\u0565\nu\3u\3")
        buf.write("u\3u\3u\5u\u056b\nu\7u\u056d\nu\fu\16u\u0570\13u\3u\5")
        buf.write("u\u0573\nu\5u\u0575\nu\5u\u0577\nu\3v\3v\3v\3v\5v\u057d")
        buf.write("\nv\3v\5v\u0580\nv\3v\3v\3v\3w\3w\3w\7w\u0588\nw\fw\16")
        buf.write("w\u058b\13w\3w\5w\u058e\nw\3x\3x\5x\u0592\nx\3x\3x\3x")
        buf.write("\3x\3x\3x\3x\3x\5x\u059c\nx\3y\3y\5y\u05a0\ny\3z\5z\u05a3")
        buf.write("\nz\3z\3z\3z\3z\3z\5z\u05aa\nz\3{\3{\3{\5{\u05af\n{\3")
        buf.write("|\3|\3}\3}\5}\u05b5\n}\3~\3~\3~\5~\u05ba\n~\3\177\6\177")
        buf.write("\u05bd\n\177\r\177\16\177\u05be\3\177\2\2\u0080\2\4\6")
        buf.write("\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\66")
        buf.write("8:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write("\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write("\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8")
        buf.write("\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba")
        buf.write("\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc")
        buf.write("\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de")
        buf.write("\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0")
        buf.write("\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\2\t\3\2Zf\3\289\3")
        buf.write("\2GH\3\2IJ\5\2::KMXX\4\2IJNN\5\2  **//\2\u0650\2\u0103")
        buf.write("\3\2\2\2\4\u0109\3\2\2\2\6\u010e\3\2\2\2\b\u0117\3\2\2")
        buf.write("\2\n\u0123\3\2\2\2\f\u0127\3\2\2\2\16\u012d\3\2\2\2\20")
        buf.write("\u0130\3\2\2\2\22\u013a\3\2\2\2\24\u0191\3\2\2\2\26\u0193")
        buf.write("\3\2\2\2\30\u01e9\3\2\2\2\32\u01eb\3\2\2\2\34\u01ef\3")
        buf.write("\2\2\2\36\u01f1\3\2\2\2 \u0206\3\2\2\2\"\u0208\3\2\2\2")
        buf.write("$\u021b\3\2\2\2&\u0223\3\2\2\2(\u0232\3\2\2\2*\u0234\3")
        buf.write("\2\2\2,\u0237\3\2\2\2.\u023e\3\2\2\2\60\u0240\3\2\2\2")
        buf.write("\62\u0242\3\2\2\2\64\u0244\3\2\2\2\66\u0248\3\2\2\28\u024a")
        buf.write("\3\2\2\2:\u0254\3\2\2\2<\u0256\3\2\2\2>\u0259\3\2\2\2")
        buf.write("@\u0271\3\2\2\2B\u0276\3\2\2\2D\u027b\3\2\2\2F\u0286\3")
        buf.write("\2\2\2H\u028e\3\2\2\2J\u0296\3\2\2\2L\u029f\3\2\2\2N\u02a8")
        buf.write("\3\2\2\2P\u02b8\3\2\2\2R\u02ba\3\2\2\2T\u02c0\3\2\2\2")
        buf.write("V\u02d3\3\2\2\2X\u02dc\3\2\2\2Z\u02e7\3\2\2\2\\\u0301")
        buf.write("\3\2\2\2^\u030d\3\2\2\2`\u0312\3\2\2\2b\u0324\3\2\2\2")
        buf.write("d\u0326\3\2\2\2f\u0338\3\2\2\2h\u033a\3\2\2\2j\u0346\3")
        buf.write("\2\2\2l\u0348\3\2\2\2n\u0350\3\2\2\2p\u0355\3\2\2\2r\u0359")
        buf.write("\3\2\2\2t\u035b\3\2\2\2v\u035f\3\2\2\2x\u036f\3\2\2\2")
        buf.write("z\u0379\3\2\2\2|\u0383\3\2\2\2~\u038d\3\2\2\2\u0080\u0392")
        buf.write("\3\2\2\2\u0082\u0397\3\2\2\2\u0084\u0399\3\2\2\2\u0086")
        buf.write("\u039b\3\2\2\2\u0088\u039d\3\2\2\2\u008a\u039f\3\2\2\2")
        buf.write("\u008c\u03a2\3\2\2\2\u008e\u03a4\3\2\2\2\u0090\u03a7\3")
        buf.write("\2\2\2\u0092\u03b0\3\2\2\2\u0094\u03b2\3\2\2\2\u0096\u03c0")
        buf.write("\3\2\2\2\u0098\u03c2\3\2\2\2\u009a\u03c7\3\2\2\2\u009c")
        buf.write("\u03d4\3\2\2\2\u009e\u03da\3\2\2\2\u00a0\u03f5\3\2\2\2")
        buf.write("\u00a2\u03f7\3\2\2\2\u00a4\u0401\3\2\2\2\u00a6\u0406\3")
        buf.write("\2\2\2\u00a8\u0427\3\2\2\2\u00aa\u0429\3\2\2\2\u00ac\u0431")
        buf.write("\3\2\2\2\u00ae\u0439\3\2\2\2\u00b0\u0446\3\2\2\2\u00b2")
        buf.write("\u044a\3\2\2\2\u00b4\u044c\3\2\2\2\u00b6\u0453\3\2\2\2")
        buf.write("\u00b8\u045a\3\2\2\2\u00ba\u0462\3\2\2\2\u00bc\u046d\3")
        buf.write("\2\2\2\u00be\u046f\3\2\2\2\u00c0\u0485\3\2\2\2\u00c2\u0487")
        buf.write("\3\2\2\2\u00c4\u048a\3\2\2\2\u00c6\u0492\3\2\2\2\u00c8")
        buf.write("\u049a\3\2\2\2\u00ca\u04a2\3\2\2\2\u00cc\u04aa\3\2\2\2")
        buf.write("\u00ce\u04b2\3\2\2\2\u00d0\u04bd\3\2\2\2\u00d2\u04bf\3")
        buf.write("\2\2\2\u00d4\u04c5\3\2\2\2\u00d6\u04e9\3\2\2\2\u00d8\u04eb")
        buf.write("\3\2\2\2\u00da\u04ef\3\2\2\2\u00dc\u050c\3\2\2\2\u00de")
        buf.write("\u050e\3\2\2\2\u00e0\u0524\3\2\2\2\u00e2\u0526\3\2\2\2")
        buf.write("\u00e4\u052c\3\2\2\2\u00e6\u053b\3\2\2\2\u00e8\u0576\3")
        buf.write("\2\2\2\u00ea\u0578\3\2\2\2\u00ec\u0584\3\2\2\2\u00ee\u059b")
        buf.write("\3\2\2\2\u00f0\u059f\3\2\2\2\u00f2\u05a2\3\2\2\2\u00f4")
        buf.write("\u05ab\3\2\2\2\u00f6\u05b0\3\2\2\2\u00f8\u05b2\3\2\2\2")
        buf.write("\u00fa\u05b9\3\2\2\2\u00fc\u05bc\3\2\2\2\u00fe\u0104\7")
        buf.write(".\2\2\u00ff\u0104\5\36\20\2\u0100\u0101\5P)\2\u0101\u0102")
        buf.write("\7.\2\2\u0102\u0104\3\2\2\2\u0103\u00fe\3\2\2\2\u0103")
        buf.write("\u00ff\3\2\2\2\u0103\u0100\3\2\2\2\u0104\3\3\2\2\2\u0105")
        buf.write("\u0108\7.\2\2\u0106\u0108\5\34\17\2\u0107\u0105\3\2\2")
        buf.write("\2\u0107\u0106\3\2\2\2\u0108\u010b\3\2\2\2\u0109\u0107")
        buf.write("\3\2\2\2\u0109\u010a\3\2\2\2\u010a\u010c\3\2\2\2\u010b")
        buf.write("\u0109\3\2\2\2\u010c\u010d\7\2\2\3\u010d\5\3\2\2\2\u010e")
        buf.write("\u0112\5\u00e6t\2\u010f\u0111\7.\2\2\u0110\u010f\3\2\2")
        buf.write("\2\u0111\u0114\3\2\2\2\u0112\u0110\3\2\2\2\u0112\u0113")
        buf.write("\3\2\2\2\u0113\u0115\3\2\2\2\u0114\u0112\3\2\2\2\u0115")
        buf.write("\u0116\7\2\2\3\u0116\7\3\2\2\2\u0117\u0118\7X\2\2\u0118")
        buf.write("\u011e\5H%\2\u0119\u011b\7;\2\2\u011a\u011c\5\u00ecw\2")
        buf.write("\u011b\u011a\3\2\2\2\u011b\u011c\3\2\2\2\u011c\u011d\3")
        buf.write("\2\2\2\u011d\u011f\7<\2\2\u011e\u0119\3\2\2\2\u011e\u011f")
        buf.write("\3\2\2\2\u011f\u0120\3\2\2\2\u0120\u0121\7.\2\2\u0121")
        buf.write("\t\3\2\2\2\u0122\u0124\5\b\5\2\u0123\u0122\3\2\2\2\u0124")
        buf.write("\u0125\3\2\2\2\u0125\u0123\3\2\2\2\u0125\u0126\3\2\2\2")
        buf.write("\u0126\13\3\2\2\2\u0127\u012b\5\n\6\2\u0128\u012c\5\u00ea")
        buf.write("v\2\u0129\u012c\5\20\t\2\u012a\u012c\5\16\b\2\u012b\u0128")
        buf.write("\3\2\2\2\u012b\u0129\3\2\2\2\u012b\u012a\3\2\2\2\u012c")
        buf.write("\r\3\2\2\2\u012d\u012e\7\13\2\2\u012e\u012f\5\20\t\2\u012f")
        buf.write("\17\3\2\2\2\u0130\u0131\7\21\2\2\u0131\u0132\5\u00d8m")
        buf.write("\2\u0132\u0135\5\22\n\2\u0133\u0134\7Y\2\2\u0134\u0136")
        buf.write("\5\u00b0Y\2\u0135\u0133\3\2\2\2\u0135\u0136\3\2\2\2\u0136")
        buf.write("\u0137\3\2\2\2\u0137\u0138\7>\2\2\u0138\u0139\5b\62\2")
        buf.write("\u0139\21\3\2\2\2\u013a\u013c\7;\2\2\u013b\u013d\5\24")
        buf.write("\13\2\u013c\u013b\3\2\2\2\u013c\u013d\3\2\2\2\u013d\u013e")
        buf.write("\3\2\2\2\u013e\u013f\7<\2\2\u013f\23\3\2\2\2\u0140\u0143")
        buf.write("\5\26\f\2\u0141\u0142\7A\2\2\u0142\u0144\5\u00b0Y\2\u0143")
        buf.write("\u0141\3\2\2\2\u0143\u0144\3\2\2\2\u0144\u014d\3\2\2\2")
        buf.write("\u0145\u0146\7=\2\2\u0146\u0149\5\26\f\2\u0147\u0148\7")
        buf.write("A\2\2\u0148\u014a\5\u00b0Y\2\u0149\u0147\3\2\2\2\u0149")
        buf.write("\u014a\3\2\2\2\u014a\u014c\3\2\2\2\u014b\u0145\3\2\2\2")
        buf.write("\u014c\u014f\3\2\2\2\u014d\u014b\3\2\2\2\u014d\u014e\3")
        buf.write("\2\2\2\u014e\u0171\3\2\2\2\u014f\u014d\3\2\2\2\u0150\u016f")
        buf.write("\7=\2\2\u0151\u0153\7:\2\2\u0152\u0154\5\26\f\2\u0153")
        buf.write("\u0152\3\2\2\2\u0153\u0154\3\2\2\2\u0154\u015d\3\2\2\2")
        buf.write("\u0155\u0156\7=\2\2\u0156\u0159\5\26\f\2\u0157\u0158\7")
        buf.write("A\2\2\u0158\u015a\5\u00b0Y\2\u0159\u0157\3\2\2\2\u0159")
        buf.write("\u015a\3\2\2\2\u015a\u015c\3\2\2\2\u015b\u0155\3\2\2\2")
        buf.write("\u015c\u015f\3\2\2\2\u015d\u015b\3\2\2\2\u015d\u015e\3")
        buf.write("\2\2\2\u015e\u0168\3\2\2\2\u015f\u015d\3\2\2\2\u0160\u0166")
        buf.write("\7=\2\2\u0161\u0162\7@\2\2\u0162\u0164\5\26\f\2\u0163")
        buf.write("\u0165\7=\2\2\u0164\u0163\3\2\2\2\u0164\u0165\3\2\2\2")
        buf.write("\u0165\u0167\3\2\2\2\u0166\u0161\3\2\2\2\u0166\u0167\3")
        buf.write("\2\2\2\u0167\u0169\3\2\2\2\u0168\u0160\3\2\2\2\u0168\u0169")
        buf.write("\3\2\2\2\u0169\u0170\3\2\2\2\u016a\u016b\7@\2\2\u016b")
        buf.write("\u016d\5\26\f\2\u016c\u016e\7=\2\2\u016d\u016c\3\2\2\2")
        buf.write("\u016d\u016e\3\2\2\2\u016e\u0170\3\2\2\2\u016f\u0151\3")
        buf.write("\2\2\2\u016f\u016a\3\2\2\2\u016f\u0170\3\2\2\2\u0170\u0172")
        buf.write("\3\2\2\2\u0171\u0150\3\2\2\2\u0171\u0172\3\2\2\2\u0172")
        buf.write("\u0192\3\2\2\2\u0173\u0175\7:\2\2\u0174\u0176\5\26\f\2")
        buf.write("\u0175\u0174\3\2\2\2\u0175\u0176\3\2\2\2\u0176\u017f\3")
        buf.write("\2\2\2\u0177\u0178\7=\2\2\u0178\u017b\5\26\f\2\u0179\u017a")
        buf.write("\7A\2\2\u017a\u017c\5\u00b0Y\2\u017b\u0179\3\2\2\2\u017b")
        buf.write("\u017c\3\2\2\2\u017c\u017e\3\2\2\2\u017d\u0177\3\2\2\2")
        buf.write("\u017e\u0181\3\2\2\2\u017f\u017d\3\2\2\2\u017f\u0180\3")
        buf.write("\2\2\2\u0180\u018a\3\2\2\2\u0181\u017f\3\2\2\2\u0182\u0188")
        buf.write("\7=\2\2\u0183\u0184\7@\2\2\u0184\u0186\5\26\f\2\u0185")
        buf.write("\u0187\7=\2\2\u0186\u0185\3\2\2\2\u0186\u0187\3\2\2\2")
        buf.write("\u0187\u0189\3\2\2\2\u0188\u0183\3\2\2\2\u0188\u0189\3")
        buf.write("\2\2\2\u0189\u018b\3\2\2\2\u018a\u0182\3\2\2\2\u018a\u018b")
        buf.write("\3\2\2\2\u018b\u0192\3\2\2\2\u018c\u018d\7@\2\2\u018d")
        buf.write("\u018f\5\26\f\2\u018e\u0190\7=\2\2\u018f\u018e\3\2\2\2")
        buf.write("\u018f\u0190\3\2\2\2\u0190\u0192\3\2\2\2\u0191\u0140\3")
        buf.write("\2\2\2\u0191\u0173\3\2\2\2\u0191\u018c\3\2\2\2\u0192\25")
        buf.write("\3\2\2\2\u0193\u0196\5\u00d8m\2\u0194\u0195\7>\2\2\u0195")
        buf.write("\u0197\5\u00b0Y\2\u0196\u0194\3\2\2\2\u0196\u0197\3\2")
        buf.write("\2\2\u0197\27\3\2\2\2\u0198\u019b\5\32\16\2\u0199\u019a")
        buf.write("\7A\2\2\u019a\u019c\5\u00b0Y\2\u019b\u0199\3\2\2\2\u019b")
        buf.write("\u019c\3\2\2\2\u019c\u01a5\3\2\2\2\u019d\u019e\7=\2\2")
        buf.write("\u019e\u01a1\5\32\16\2\u019f\u01a0\7A\2\2\u01a0\u01a2")
        buf.write("\5\u00b0Y\2\u01a1\u019f\3\2\2\2\u01a1\u01a2\3\2\2\2\u01a2")
        buf.write("\u01a4\3\2\2\2\u01a3\u019d\3\2\2\2\u01a4\u01a7\3\2\2\2")
        buf.write("\u01a5\u01a3\3\2\2\2\u01a5\u01a6\3\2\2\2\u01a6\u01c9\3")
        buf.write("\2\2\2\u01a7\u01a5\3\2\2\2\u01a8\u01c7\7=\2\2\u01a9\u01ab")
        buf.write("\7:\2\2\u01aa\u01ac\5\32\16\2\u01ab\u01aa\3\2\2\2\u01ab")
        buf.write("\u01ac\3\2\2\2\u01ac\u01b5\3\2\2\2\u01ad\u01ae\7=\2\2")
        buf.write("\u01ae\u01b1\5\32\16\2\u01af\u01b0\7A\2\2\u01b0\u01b2")
        buf.write("\5\u00b0Y\2\u01b1\u01af\3\2\2\2\u01b1\u01b2\3\2\2\2\u01b2")
        buf.write("\u01b4\3\2\2\2\u01b3\u01ad\3\2\2\2\u01b4\u01b7\3\2\2\2")
        buf.write("\u01b5\u01b3\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6\u01c0\3")
        buf.write("\2\2\2\u01b7\u01b5\3\2\2\2\u01b8\u01be\7=\2\2\u01b9\u01ba")
        buf.write("\7@\2\2\u01ba\u01bc\5\32\16\2\u01bb\u01bd\7=\2\2\u01bc")
        buf.write("\u01bb\3\2\2\2\u01bc\u01bd\3\2\2\2\u01bd\u01bf\3\2\2\2")
        buf.write("\u01be\u01b9\3\2\2\2\u01be\u01bf\3\2\2\2\u01bf\u01c1\3")
        buf.write("\2\2\2\u01c0\u01b8\3\2\2\2\u01c0\u01c1\3\2\2\2\u01c1\u01c8")
        buf.write("\3\2\2\2\u01c2\u01c3\7@\2\2\u01c3\u01c5\5\32\16\2\u01c4")
        buf.write("\u01c6\7=\2\2\u01c5\u01c4\3\2\2\2\u01c5\u01c6\3\2\2\2")
        buf.write("\u01c6\u01c8\3\2\2\2\u01c7\u01a9\3\2\2\2\u01c7\u01c2\3")
        buf.write("\2\2\2\u01c7\u01c8\3\2\2\2\u01c8\u01ca\3\2\2\2\u01c9\u01a8")
        buf.write("\3\2\2\2\u01c9\u01ca\3\2\2\2\u01ca\u01ea\3\2\2\2\u01cb")
        buf.write("\u01cd\7:\2\2\u01cc\u01ce\5\32\16\2\u01cd\u01cc\3\2\2")
        buf.write("\2\u01cd\u01ce\3\2\2\2\u01ce\u01d7\3\2\2\2\u01cf\u01d0")
        buf.write("\7=\2\2\u01d0\u01d3\5\32\16\2\u01d1\u01d2\7A\2\2\u01d2")
        buf.write("\u01d4\5\u00b0Y\2\u01d3\u01d1\3\2\2\2\u01d3\u01d4\3\2")
        buf.write("\2\2\u01d4\u01d6\3\2\2\2\u01d5\u01cf\3\2\2\2\u01d6\u01d9")
        buf.write("\3\2\2\2\u01d7\u01d5\3\2\2\2\u01d7\u01d8\3\2\2\2\u01d8")
        buf.write("\u01e2\3\2\2\2\u01d9\u01d7\3\2\2\2\u01da\u01e0\7=\2\2")
        buf.write("\u01db\u01dc\7@\2\2\u01dc\u01de\5\32\16\2\u01dd\u01df")
        buf.write("\7=\2\2\u01de\u01dd\3\2\2\2\u01de\u01df\3\2\2\2\u01df")
        buf.write("\u01e1\3\2\2\2\u01e0\u01db\3\2\2\2\u01e0\u01e1\3\2\2\2")
        buf.write("\u01e1\u01e3\3\2\2\2\u01e2\u01da\3\2\2\2\u01e2\u01e3\3")
        buf.write("\2\2\2\u01e3\u01ea\3\2\2\2\u01e4\u01e5\7@\2\2\u01e5\u01e7")
        buf.write("\5\32\16\2\u01e6\u01e8\7=\2\2\u01e7\u01e6\3\2\2\2\u01e7")
        buf.write("\u01e8\3\2\2\2\u01e8\u01ea\3\2\2\2\u01e9\u0198\3\2\2\2")
        buf.write("\u01e9\u01cb\3\2\2\2\u01e9\u01e4\3\2\2\2\u01ea\31\3\2")
        buf.write("\2\2\u01eb\u01ec\5\u00d8m\2\u01ec\33\3\2\2\2\u01ed\u01f0")
        buf.write("\5\36\20\2\u01ee\u01f0\5P)\2\u01ef\u01ed\3\2\2\2\u01ef")
        buf.write("\u01ee\3\2\2\2\u01f0\35\3\2\2\2\u01f1\u01f6\5 \21\2\u01f2")
        buf.write("\u01f3\7?\2\2\u01f3\u01f5\5 \21\2\u01f4\u01f2\3\2\2\2")
        buf.write("\u01f5\u01f8\3\2\2\2\u01f6\u01f4\3\2\2\2\u01f6\u01f7\3")
        buf.write("\2\2\2\u01f7\u01fa\3\2\2\2\u01f8\u01f6\3\2\2\2\u01f9\u01fb")
        buf.write("\7?\2\2\u01fa\u01f9\3\2\2\2\u01fa\u01fb\3\2\2\2\u01fb")
        buf.write("\u01fc\3\2\2\2\u01fc\u01fd\7.\2\2\u01fd\37\3\2\2\2\u01fe")
        buf.write("\u0207\5\"\22\2\u01ff\u0207\5*\26\2\u0200\u0207\5,\27")
        buf.write("\2\u0201\u0207\5.\30\2\u0202\u0207\5:\36\2\u0203\u0207")
        buf.write("\5J&\2\u0204\u0207\5L\'\2\u0205\u0207\5N(\2\u0206\u01fe")
        buf.write("\3\2\2\2\u0206\u01ff\3\2\2\2\u0206\u0200\3\2\2\2\u0206")
        buf.write("\u0201\3\2\2\2\u0206\u0202\3\2\2\2\u0206\u0203\3\2\2\2")
        buf.write("\u0206\u0204\3\2\2\2\u0206\u0205\3\2\2\2\u0207!\3\2\2")
        buf.write("\2\u0208\u0219\5&\24\2\u0209\u021a\5$\23\2\u020a\u020d")
        buf.write("\5(\25\2\u020b\u020e\5\u00f8}\2\u020c\u020e\5\u00e6t\2")
        buf.write("\u020d\u020b\3\2\2\2\u020d\u020c\3\2\2\2\u020e\u021a\3")
        buf.write("\2\2\2\u020f\u0212\7A\2\2\u0210\u0213\5\u00f8}\2\u0211")
        buf.write("\u0213\5&\24\2\u0212\u0210\3\2\2\2\u0212\u0211\3\2\2\2")
        buf.write("\u0213\u0215\3\2\2\2\u0214\u020f\3\2\2\2\u0215\u0218\3")
        buf.write("\2\2\2\u0216\u0214\3\2\2\2\u0216\u0217\3\2\2\2\u0217\u021a")
        buf.write("\3\2\2\2\u0218\u0216\3\2\2\2\u0219\u0209\3\2\2\2\u0219")
        buf.write("\u020a\3\2\2\2\u0219\u0216\3\2\2\2\u021a#\3\2\2\2\u021b")
        buf.write("\u021c\7>\2\2\u021c\u021f\5\u00b0Y\2\u021d\u021e\7A\2")
        buf.write("\2\u021e\u0220\5\u00b0Y\2\u021f\u021d\3\2\2\2\u021f\u0220")
        buf.write("\3\2\2\2\u0220%\3\2\2\2\u0221\u0224\5\u00b0Y\2\u0222\u0224")
        buf.write("\5\u00c2b\2\u0223\u0221\3\2\2\2\u0223\u0222\3\2\2\2\u0224")
        buf.write("\u022c\3\2\2\2\u0225\u0228\7=\2\2\u0226\u0229\5\u00b0")
        buf.write("Y\2\u0227\u0229\5\u00c2b\2\u0228\u0226\3\2\2\2\u0228\u0227")
        buf.write("\3\2\2\2\u0229\u022b\3\2\2\2\u022a\u0225\3\2\2\2\u022b")
        buf.write("\u022e\3\2\2\2\u022c\u022a\3\2\2\2\u022c\u022d\3\2\2\2")
        buf.write("\u022d\u0230\3\2\2\2\u022e\u022c\3\2\2\2\u022f\u0231\7")
        buf.write("=\2\2\u0230\u022f\3\2\2\2\u0230\u0231\3\2\2\2\u0231\'")
        buf.write("\3\2\2\2\u0232\u0233\t\2\2\2\u0233)\3\2\2\2\u0234\u0235")
        buf.write("\7\22\2\2\u0235\u0236\5\u00e4s\2\u0236+\3\2\2\2\u0237")
        buf.write("\u0238\7%\2\2\u0238-\3\2\2\2\u0239\u023f\5\60\31\2\u023a")
        buf.write("\u023f\5\62\32\2\u023b\u023f\5\64\33\2\u023c\u023f\58")
        buf.write("\35\2\u023d\u023f\5\66\34\2\u023e\u0239\3\2\2\2\u023e")
        buf.write("\u023a\3\2\2\2\u023e\u023b\3\2\2\2\u023e\u023c\3\2\2\2")
        buf.write("\u023e\u023d\3\2\2\2\u023f/\3\2\2\2\u0240\u0241\7\r\2")
        buf.write("\2\u0241\61\3\2\2\2\u0242\u0243\7\20\2\2\u0243\63\3\2")
        buf.write("\2\2\u0244\u0246\7\'\2\2\u0245\u0247\5\u00e6t\2\u0246")
        buf.write("\u0245\3\2\2\2\u0246\u0247\3\2\2\2\u0247\65\3\2\2\2\u0248")
        buf.write("\u0249\5\u00f8}\2\u0249\67\3\2\2\2\u024a\u0250\7&\2\2")
        buf.write("\u024b\u024e\5\u00b0Y\2\u024c\u024d\7\31\2\2\u024d\u024f")
        buf.write("\5\u00b0Y\2\u024e\u024c\3\2\2\2\u024e\u024f\3\2\2\2\u024f")
        buf.write("\u0251\3\2\2\2\u0250\u024b\3\2\2\2\u0250\u0251\3\2\2\2")
        buf.write("\u02519\3\2\2\2\u0252\u0255\5<\37\2\u0253\u0255\5> \2")
        buf.write("\u0254\u0252\3\2\2\2\u0254\u0253\3\2\2\2\u0255;\3\2\2")
        buf.write("\2\u0256\u0257\7\34\2\2\u0257\u0258\5F$\2\u0258=\3\2\2")
        buf.write("\2\u0259\u0266\7\31\2\2\u025a\u025c\t\3\2\2\u025b\u025a")
        buf.write("\3\2\2\2\u025c\u025f\3\2\2\2\u025d\u025b\3\2\2\2\u025d")
        buf.write("\u025e\3\2\2\2\u025e\u0260\3\2\2\2\u025f\u025d\3\2\2\2")
        buf.write("\u0260\u0267\5H%\2\u0261\u0263\t\3\2\2\u0262\u0261\3\2")
        buf.write("\2\2\u0263\u0264\3\2\2\2\u0264\u0262\3\2\2\2\u0264\u0265")
        buf.write("\3\2\2\2\u0265\u0267\3\2\2\2\u0266\u025d\3\2\2\2\u0266")
        buf.write("\u0262\3\2\2\2\u0267\u0268\3\2\2\2\u0268\u026f\7\34\2")
        buf.write("\2\u0269\u0270\7:\2\2\u026a\u026b\7;\2\2\u026b\u026c\5")
        buf.write("D#\2\u026c\u026d\7<\2\2\u026d\u0270\3\2\2\2\u026e\u0270")
        buf.write("\5D#\2\u026f\u0269\3\2\2\2\u026f\u026a\3\2\2\2\u026f\u026e")
        buf.write("\3\2\2\2\u0270?\3\2\2\2\u0271\u0274\5\u00d8m\2\u0272\u0273")
        buf.write("\7\t\2\2\u0273\u0275\5\u00d8m\2\u0274\u0272\3\2\2\2\u0274")
        buf.write("\u0275\3\2\2\2\u0275A\3\2\2\2\u0276\u0279\5H%\2\u0277")
        buf.write("\u0278\7\t\2\2\u0278\u027a\5\u00d8m\2\u0279\u0277\3\2")
        buf.write("\2\2\u0279\u027a\3\2\2\2\u027aC\3\2\2\2\u027b\u0280\5")
        buf.write("@!\2\u027c\u027d\7=\2\2\u027d\u027f\5@!\2\u027e\u027c")
        buf.write("\3\2\2\2\u027f\u0282\3\2\2\2\u0280\u027e\3\2\2\2\u0280")
        buf.write("\u0281\3\2\2\2\u0281\u0284\3\2\2\2\u0282\u0280\3\2\2\2")
        buf.write("\u0283\u0285\7=\2\2\u0284\u0283\3\2\2\2\u0284\u0285\3")
        buf.write("\2\2\2\u0285E\3\2\2\2\u0286\u028b\5B\"\2\u0287\u0288\7")
        buf.write("=\2\2\u0288\u028a\5B\"\2\u0289\u0287\3\2\2\2\u028a\u028d")
        buf.write("\3\2\2\2\u028b\u0289\3\2\2\2\u028b\u028c\3\2\2\2\u028c")
        buf.write("G\3\2\2\2\u028d\u028b\3\2\2\2\u028e\u0293\5\u00d8m\2\u028f")
        buf.write("\u0290\78\2\2\u0290\u0292\5\u00d8m\2\u0291\u028f\3\2\2")
        buf.write("\2\u0292\u0295\3\2\2\2\u0293\u0291\3\2\2\2\u0293\u0294")
        buf.write("\3\2\2\2\u0294I\3\2\2\2\u0295\u0293\3\2\2\2\u0296\u0297")
        buf.write("\7\32\2\2\u0297\u029c\5\u00d8m\2\u0298\u0299\7=\2\2\u0299")
        buf.write("\u029b\5\u00d8m\2\u029a\u0298\3\2\2\2\u029b\u029e\3\2")
        buf.write("\2\2\u029c\u029a\3\2\2\2\u029c\u029d\3\2\2\2\u029dK\3")
        buf.write("\2\2\2\u029e\u029c\3\2\2\2\u029f\u02a0\7\"\2\2\u02a0\u02a5")
        buf.write("\5\u00d8m\2\u02a1\u02a2\7=\2\2\u02a2\u02a4\5\u00d8m\2")
        buf.write("\u02a3\u02a1\3\2\2\2\u02a4\u02a7\3\2\2\2\u02a5\u02a3\3")
        buf.write("\2\2\2\u02a5\u02a6\3\2\2\2\u02a6M\3\2\2\2\u02a7\u02a5")
        buf.write("\3\2\2\2\u02a8\u02a9\7\n\2\2\u02a9\u02ac\5\u00b0Y\2\u02aa")
        buf.write("\u02ab\7=\2\2\u02ab\u02ad\5\u00b0Y\2\u02ac\u02aa\3\2\2")
        buf.write("\2\u02ac\u02ad\3\2\2\2\u02adO\3\2\2\2\u02ae\u02b9\5T+")
        buf.write("\2\u02af\u02b9\5V,\2\u02b0\u02b9\5X-\2\u02b1\u02b9\5Z")
        buf.write(".\2\u02b2\u02b9\5\\/\2\u02b3\u02b9\5\20\t\2\u02b4\u02b9")
        buf.write("\5\u00eav\2\u02b5\u02b9\5\f\7\2\u02b6\u02b9\5R*\2\u02b7")
        buf.write("\u02b9\5d\63\2\u02b8\u02ae\3\2\2\2\u02b8\u02af\3\2\2\2")
        buf.write("\u02b8\u02b0\3\2\2\2\u02b8\u02b1\3\2\2\2\u02b8\u02b2\3")
        buf.write("\2\2\2\u02b8\u02b3\3\2\2\2\u02b8\u02b4\3\2\2\2\u02b8\u02b5")
        buf.write("\3\2\2\2\u02b8\u02b6\3\2\2\2\u02b8\u02b7\3\2\2\2\u02b9")
        buf.write("Q\3\2\2\2\u02ba\u02be\7\13\2\2\u02bb\u02bf\5\20\t\2\u02bc")
        buf.write("\u02bf\5\\/\2\u02bd\u02bf\5X-\2\u02be\u02bb\3\2\2\2\u02be")
        buf.write("\u02bc\3\2\2\2\u02be\u02bd\3\2\2\2\u02bfS\3\2\2\2\u02c0")
        buf.write("\u02c1\7\33\2\2\u02c1\u02c2\5\u00b0Y\2\u02c2\u02c3\7>")
        buf.write("\2\2\u02c3\u02cb\5b\62\2\u02c4\u02c5\7\23\2\2\u02c5\u02c6")
        buf.write("\5\u00b0Y\2\u02c6\u02c7\7>\2\2\u02c7\u02c8\5b\62\2\u02c8")
        buf.write("\u02ca\3\2\2\2\u02c9\u02c4\3\2\2\2\u02ca\u02cd\3\2\2\2")
        buf.write("\u02cb\u02c9\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc\u02d1\3")
        buf.write("\2\2\2\u02cd\u02cb\3\2\2\2\u02ce\u02cf\7\24\2\2\u02cf")
        buf.write("\u02d0\7>\2\2\u02d0\u02d2\5b\62\2\u02d1\u02ce\3\2\2\2")
        buf.write("\u02d1\u02d2\3\2\2\2\u02d2U\3\2\2\2\u02d3\u02d4\7+\2\2")
        buf.write("\u02d4\u02d5\5\u00b0Y\2\u02d5\u02d6\7>\2\2\u02d6\u02da")
        buf.write("\5b\62\2\u02d7\u02d8\7\24\2\2\u02d8\u02d9\7>\2\2\u02d9")
        buf.write("\u02db\5b\62\2\u02da\u02d7\3\2\2\2\u02da\u02db\3\2\2\2")
        buf.write("\u02dbW\3\2\2\2\u02dc\u02dd\7\30\2\2\u02dd\u02de\5\u00e4")
        buf.write("s\2\u02de\u02df\7\35\2\2\u02df\u02e0\5\u00e6t\2\u02e0")
        buf.write("\u02e1\7>\2\2\u02e1\u02e5\5b\62\2\u02e2\u02e3\7\24\2\2")
        buf.write("\u02e3\u02e4\7>\2\2\u02e4\u02e6\5b\62\2\u02e5\u02e2\3")
        buf.write("\2\2\2\u02e5\u02e6\3\2\2\2\u02e6Y\3\2\2\2\u02e7\u02e8")
        buf.write("\7)\2\2\u02e8\u02e9\7>\2\2\u02e9\u02ff\5b\62\2\u02ea\u02eb")
        buf.write("\5`\61\2\u02eb\u02ec\7>\2\2\u02ec\u02ed\5b\62\2\u02ed")
        buf.write("\u02ef\3\2\2\2\u02ee\u02ea\3\2\2\2\u02ef\u02f0\3\2\2\2")
        buf.write("\u02f0\u02ee\3\2\2\2\u02f0\u02f1\3\2\2\2\u02f1\u02f5\3")
        buf.write("\2\2\2\u02f2\u02f3\7\24\2\2\u02f3\u02f4\7>\2\2\u02f4\u02f6")
        buf.write("\5b\62\2\u02f5\u02f2\3\2\2\2\u02f5\u02f6\3\2\2\2\u02f6")
        buf.write("\u02fa\3\2\2\2\u02f7\u02f8\7\27\2\2\u02f8\u02f9\7>\2\2")
        buf.write("\u02f9\u02fb\5b\62\2\u02fa\u02f7\3\2\2\2\u02fa\u02fb\3")
        buf.write("\2\2\2\u02fb\u0300\3\2\2\2\u02fc\u02fd\7\27\2\2\u02fd")
        buf.write("\u02fe\7>\2\2\u02fe\u0300\5b\62\2\u02ff\u02ee\3\2\2\2")
        buf.write("\u02ff\u02fc\3\2\2\2\u0300[\3\2\2\2\u0301\u0302\7,\2\2")
        buf.write("\u0302\u0307\5^\60\2\u0303\u0304\7=\2\2\u0304\u0306\5")
        buf.write("^\60\2\u0305\u0303\3\2\2\2\u0306\u0309\3\2\2\2\u0307\u0305")
        buf.write("\3\2\2\2\u0307\u0308\3\2\2\2\u0308\u030a\3\2\2\2\u0309")
        buf.write("\u0307\3\2\2\2\u030a\u030b\7>\2\2\u030b\u030c\5b\62\2")
        buf.write("\u030c]\3\2\2\2\u030d\u0310\5\u00b0Y\2\u030e\u030f\7\t")
        buf.write("\2\2\u030f\u0311\5\u00c4c\2\u0310\u030e\3\2\2\2\u0310")
        buf.write("\u0311\3\2\2\2\u0311_\3\2\2\2\u0312\u0318\7\25\2\2\u0313")
        buf.write("\u0316\5\u00b0Y\2\u0314\u0315\7\t\2\2\u0315\u0317\5\u00d8")
        buf.write("m\2\u0316\u0314\3\2\2\2\u0316\u0317\3\2\2\2\u0317\u0319")
        buf.write("\3\2\2\2\u0318\u0313\3\2\2\2\u0318\u0319\3\2\2\2\u0319")
        buf.write("a\3\2\2\2\u031a\u0325\5\36\20\2\u031b\u031c\7.\2\2\u031c")
        buf.write("\u031e\7\3\2\2\u031d\u031f\5\34\17\2\u031e\u031d\3\2\2")
        buf.write("\2\u031f\u0320\3\2\2\2\u0320\u031e\3\2\2\2\u0320\u0321")
        buf.write("\3\2\2\2\u0321\u0322\3\2\2\2\u0322\u0323\7\4\2\2\u0323")
        buf.write("\u0325\3\2\2\2\u0324\u031a\3\2\2\2\u0324\u031b\3\2\2\2")
        buf.write("\u0325c\3\2\2\2\u0326\u0327\7 \2\2\u0327\u0328\5f\64\2")
        buf.write("\u0328\u0329\7>\2\2\u0329\u032a\7.\2\2\u032a\u032c\7\3")
        buf.write("\2\2\u032b\u032d\5l\67\2\u032c\u032b\3\2\2\2\u032d\u032e")
        buf.write("\3\2\2\2\u032e\u032c\3\2\2\2\u032e\u032f\3\2\2\2\u032f")
        buf.write("\u0330\3\2\2\2\u0330\u0331\7\4\2\2\u0331e\3\2\2\2\u0332")
        buf.write("\u0333\5j\66\2\u0333\u0335\7=\2\2\u0334\u0336\5h\65\2")
        buf.write("\u0335\u0334\3\2\2\2\u0335\u0336\3\2\2\2\u0336\u0339\3")
        buf.write("\2\2\2\u0337\u0339\5\u00b0Y\2\u0338\u0332\3\2\2\2\u0338")
        buf.write("\u0337\3\2\2\2\u0339g\3\2\2\2\u033a\u033c\7=\2\2\u033b")
        buf.write("\u033d\5j\66\2\u033c\u033b\3\2\2\2\u033d\u033e\3\2\2\2")
        buf.write("\u033e\u033c\3\2\2\2\u033e\u033f\3\2\2\2\u033f\u0341\3")
        buf.write("\2\2\2\u0340\u0342\7=\2\2\u0341\u0340\3\2\2\2\u0341\u0342")
        buf.write("\3\2\2\2\u0342i\3\2\2\2\u0343\u0344\7:\2\2\u0344\u0347")
        buf.write("\5\u00c4c\2\u0345\u0347\5\u00b0Y\2\u0346\u0343\3\2\2\2")
        buf.write("\u0346\u0345\3\2\2\2\u0347k\3\2\2\2\u0348\u0349\7\16\2")
        buf.write("\2\u0349\u034b\5p9\2\u034a\u034c\5n8\2\u034b\u034a\3\2")
        buf.write("\2\2\u034b\u034c\3\2\2\2\u034c\u034d\3\2\2\2\u034d\u034e")
        buf.write("\7>\2\2\u034e\u034f\5b\62\2\u034fm\3\2\2\2\u0350\u0351")
        buf.write("\7\33\2\2\u0351\u0352\5\u00b0Y\2\u0352o\3\2\2\2\u0353")
        buf.write("\u0356\5\u0098M\2\u0354\u0356\5r:\2\u0355\u0353\3\2\2")
        buf.write("\2\u0355\u0354\3\2\2\2\u0356q\3\2\2\2\u0357\u035a\5t;")
        buf.write("\2\u0358\u035a\5v<\2\u0359\u0357\3\2\2\2\u0359\u0358\3")
        buf.write("\2\2\2\u035as\3\2\2\2\u035b\u035c\5v<\2\u035c\u035d\7")
        buf.write("\t\2\2\u035d\u035e\5\u008aF\2\u035eu\3\2\2\2\u035f\u0364")
        buf.write("\5x=\2\u0360\u0361\7D\2\2\u0361\u0363\5x=\2\u0362\u0360")
        buf.write("\3\2\2\2\u0363\u0366\3\2\2\2\u0364\u0362\3\2\2\2\u0364")
        buf.write("\u0365\3\2\2\2\u0365w\3\2\2\2\u0366\u0364\3\2\2\2\u0367")
        buf.write("\u0370\5z>\2\u0368\u0370\5\u0088E\2\u0369\u0370\5\u008c")
        buf.write("G\2\u036a\u0370\5\u008eH\2\u036b\u0370\5\u0094K\2\u036c")
        buf.write("\u0370\5\u0096L\2\u036d\u0370\5\u00a0Q\2\u036e\u0370\5")
        buf.write("\u00a8U\2\u036f\u0367\3\2\2\2\u036f\u0368\3\2\2\2\u036f")
        buf.write("\u0369\3\2\2\2\u036f\u036a\3\2\2\2\u036f\u036b\3\2\2\2")
        buf.write("\u036f\u036c\3\2\2\2\u036f\u036d\3\2\2\2\u036f\u036e\3")
        buf.write("\2\2\2\u0370y\3\2\2\2\u0371\u0372\5\u0080A\2\u0372\u0373")
        buf.write("\6>\2\2\u0373\u037a\3\2\2\2\u0374\u037a\5~@\2\u0375\u037a")
        buf.write("\5\u00fc\177\2\u0376\u037a\7!\2\2\u0377\u037a\7(\2\2\u0378")
        buf.write("\u037a\7\26\2\2\u0379\u0371\3\2\2\2\u0379\u0374\3\2\2")
        buf.write("\2\u0379\u0375\3\2\2\2\u0379\u0376\3\2\2\2\u0379\u0377")
        buf.write("\3\2\2\2\u0379\u0378\3\2\2\2\u037a{\3\2\2\2\u037b\u037c")
        buf.write("\5\u0080A\2\u037c\u037d\6?\3\2\u037d\u0384\3\2\2\2\u037e")
        buf.write("\u0384\5~@\2\u037f\u0384\5\u00fc\177\2\u0380\u0384\7!")
        buf.write("\2\2\u0381\u0384\7(\2\2\u0382\u0384\7\26\2\2\u0383\u037b")
        buf.write("\3\2\2\2\u0383\u037e\3\2\2\2\u0383\u037f\3\2\2\2\u0383")
        buf.write("\u0380\3\2\2\2\u0383\u0381\3\2\2\2\u0383\u0382\3\2\2\2")
        buf.write("\u0384}\3\2\2\2\u0385\u0386\5\u0082B\2\u0386\u0387\7I")
        buf.write("\2\2\u0387\u0388\5\u0086D\2\u0388\u038e\3\2\2\2\u0389")
        buf.write("\u038a\5\u0082B\2\u038a\u038b\7J\2\2\u038b\u038c\5\u0086")
        buf.write("D\2\u038c\u038e\3\2\2\2\u038d\u0385\3\2\2\2\u038d\u0389")
        buf.write("\3\2\2\2\u038e\177\3\2\2\2\u038f\u0393\7\6\2\2\u0390\u0391")
        buf.write("\7J\2\2\u0391\u0393\7\6\2\2\u0392\u038f\3\2\2\2\u0392")
        buf.write("\u0390\3\2\2\2\u0393\u0081\3\2\2\2\u0394\u0398\5\u0084")
        buf.write("C\2\u0395\u0396\7J\2\2\u0396\u0398\5\u0084C\2\u0397\u0394")
        buf.write("\3\2\2\2\u0397\u0395\3\2\2\2\u0398\u0083\3\2\2\2\u0399")
        buf.write("\u039a\7\6\2\2\u039a\u0085\3\2\2\2\u039b\u039c\7\6\2\2")
        buf.write("\u039c\u0087\3\2\2\2\u039d\u039e\5\u008aF\2\u039e\u0089")
        buf.write("\3\2\2\2\u039f\u03a0\5\u00d8m\2\u03a0\u03a1\6F\4\2\u03a1")
        buf.write("\u008b\3\2\2\2\u03a2\u03a3\7*\2\2\u03a3\u008d\3\2\2\2")
        buf.write("\u03a4\u03a5\5\u0090I\2\u03a5\u03a6\6H\5\2\u03a6\u008f")
        buf.write("\3\2\2\2\u03a7\u03aa\5\u00d8m\2\u03a8\u03a9\78\2\2\u03a9")
        buf.write("\u03ab\5\u00d8m\2\u03aa\u03a8\3\2\2\2\u03ab\u03ac\3\2")
        buf.write("\2\2\u03ac\u03aa\3\2\2\2\u03ac\u03ad\3\2\2\2\u03ad\u0091")
        buf.write("\3\2\2\2\u03ae\u03b1\5\u0090I\2\u03af\u03b1\5\u00d8m\2")
        buf.write("\u03b0\u03ae\3\2\2\2\u03b0\u03af\3\2\2\2\u03b1\u0093\3")
        buf.write("\2\2\2\u03b2\u03b3\7;\2\2\u03b3\u03b4\5r:\2\u03b4\u03b5")
        buf.write("\7<\2\2\u03b5\u0095\3\2\2\2\u03b6\u03b8\7B\2\2\u03b7\u03b9")
        buf.write("\5\u009aN\2\u03b8\u03b7\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9")
        buf.write("\u03ba\3\2\2\2\u03ba\u03c1\7C\2\2\u03bb\u03bd\7;\2\2\u03bc")
        buf.write("\u03be\5\u0098M\2\u03bd\u03bc\3\2\2\2\u03bd\u03be\3\2")
        buf.write("\2\2\u03be\u03bf\3\2\2\2\u03bf\u03c1\7<\2\2\u03c0\u03b6")
        buf.write("\3\2\2\2\u03c0\u03bb\3\2\2\2\u03c1\u0097\3\2\2\2\u03c2")
        buf.write("\u03c3\5\u009cO\2\u03c3\u03c5\7=\2\2\u03c4\u03c6\5\u009a")
        buf.write("N\2\u03c5\u03c4\3\2\2\2\u03c5\u03c6\3\2\2\2\u03c6\u0099")
        buf.write("\3\2\2\2\u03c7\u03cc\5\u009cO\2\u03c8\u03c9\7=\2\2\u03c9")
        buf.write("\u03cb\5\u009cO\2\u03ca\u03c8\3\2\2\2\u03cb\u03ce\3\2")
        buf.write("\2\2\u03cc\u03ca\3\2\2\2\u03cc\u03cd\3\2\2\2\u03cd\u03d0")
        buf.write("\3\2\2\2\u03ce\u03cc\3\2\2\2\u03cf\u03d1\7=\2\2\u03d0")
        buf.write("\u03cf\3\2\2\2\u03d0\u03d1\3\2\2\2\u03d1\u009b\3\2\2\2")
        buf.write("\u03d2\u03d5\5\u009eP\2\u03d3\u03d5\5r:\2\u03d4\u03d2")
        buf.write("\3\2\2\2\u03d4\u03d3\3\2\2\2\u03d5\u009d\3\2\2\2\u03d6")
        buf.write("\u03d7\7:\2\2\u03d7\u03db\5\u008aF\2\u03d8\u03d9\7:\2")
        buf.write("\2\u03d9\u03db\5\u008cG\2\u03da\u03d6\3\2\2\2\u03da\u03d8")
        buf.write("\3\2\2\2\u03db\u009f\3\2\2\2\u03dc\u03dd\7O\2\2\u03dd")
        buf.write("\u03f6\7P\2\2\u03de\u03df\7O\2\2\u03df\u03e1\5\u00a6T")
        buf.write("\2\u03e0\u03e2\7=\2\2\u03e1\u03e0\3\2\2\2\u03e1\u03e2")
        buf.write("\3\2\2\2\u03e2\u03e3\3\2\2\2\u03e3\u03e4\7P\2\2\u03e4")
        buf.write("\u03f6\3\2\2\2\u03e5\u03e6\7O\2\2\u03e6\u03e7\5\u00a2")
        buf.write("R\2\u03e7\u03e8\7=\2\2\u03e8\u03ea\5\u00a6T\2\u03e9\u03eb")
        buf.write("\7=\2\2\u03ea\u03e9\3\2\2\2\u03ea\u03eb\3\2\2\2\u03eb")
        buf.write("\u03ec\3\2\2\2\u03ec\u03ed\7P\2\2\u03ed\u03f6\3\2\2\2")
        buf.write("\u03ee\u03ef\7O\2\2\u03ef\u03f1\5\u00a2R\2\u03f0\u03f2")
        buf.write("\7=\2\2\u03f1\u03f0\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2")
        buf.write("\u03f3\3\2\2\2\u03f3\u03f4\7P\2\2\u03f4\u03f6\3\2\2\2")
        buf.write("\u03f5\u03dc\3\2\2\2\u03f5\u03de\3\2\2\2\u03f5\u03e5\3")
        buf.write("\2\2\2\u03f5\u03ee\3\2\2\2\u03f6\u00a1\3\2\2\2\u03f7\u03fc")
        buf.write("\5\u00a4S\2\u03f8\u03f9\7=\2\2\u03f9\u03fb\5\u00a4S\2")
        buf.write("\u03fa\u03f8\3\2\2\2\u03fb\u03fe\3\2\2\2\u03fc\u03fa\3")
        buf.write("\2\2\2\u03fc\u03fd\3\2\2\2\u03fd\u00a3\3\2\2\2\u03fe\u03fc")
        buf.write("\3\2\2\2\u03ff\u0402\5|?\2\u0400\u0402\5\u0090I\2\u0401")
        buf.write("\u03ff\3\2\2\2\u0401\u0400\3\2\2\2\u0402\u0403\3\2\2\2")
        buf.write("\u0403\u0404\7>\2\2\u0404\u0405\5r:\2\u0405\u00a5\3\2")
        buf.write("\2\2\u0406\u0407\7@\2\2\u0407\u0408\5\u008aF\2\u0408\u00a7")
        buf.write("\3\2\2\2\u0409\u040a\5\u0092J\2\u040a\u040b\7;\2\2\u040b")
        buf.write("\u040c\7<\2\2\u040c\u0428\3\2\2\2\u040d\u040e\5\u0092")
        buf.write("J\2\u040e\u040f\7;\2\2\u040f\u0411\5\u00aaV\2\u0410\u0412")
        buf.write("\7=\2\2\u0411\u0410\3\2\2\2\u0411\u0412\3\2\2\2\u0412")
        buf.write("\u0413\3\2\2\2\u0413\u0414\7<\2\2\u0414\u0428\3\2\2\2")
        buf.write("\u0415\u0416\5\u0092J\2\u0416\u0417\7;\2\2\u0417\u0419")
        buf.write("\5\u00acW\2\u0418\u041a\7=\2\2\u0419\u0418\3\2\2\2\u0419")
        buf.write("\u041a\3\2\2\2\u041a\u041b\3\2\2\2\u041b\u041c\7<\2\2")
        buf.write("\u041c\u0428\3\2\2\2\u041d\u041e\5\u0092J\2\u041e\u041f")
        buf.write("\7;\2\2\u041f\u0420\5\u00aaV\2\u0420\u0421\7=\2\2\u0421")
        buf.write("\u0423\5\u00acW\2\u0422\u0424\7=\2\2\u0423\u0422\3\2\2")
        buf.write("\2\u0423\u0424\3\2\2\2\u0424\u0425\3\2\2\2\u0425\u0426")
        buf.write("\7<\2\2\u0426\u0428\3\2\2\2\u0427\u0409\3\2\2\2\u0427")
        buf.write("\u040d\3\2\2\2\u0427\u0415\3\2\2\2\u0427\u041d\3\2\2\2")
        buf.write("\u0428\u00a9\3\2\2\2\u0429\u042e\5r:\2\u042a\u042b\7=")
        buf.write("\2\2\u042b\u042d\5r:\2\u042c\u042a\3\2\2\2\u042d\u0430")
        buf.write("\3\2\2\2\u042e\u042c\3\2\2\2\u042e\u042f\3\2\2\2\u042f")
        buf.write("\u00ab\3\2\2\2\u0430\u042e\3\2\2\2\u0431\u0436\5\u00ae")
        buf.write("X\2\u0432\u0433\7=\2\2\u0433\u0435\5\u00aeX\2\u0434\u0432")
        buf.write("\3\2\2\2\u0435\u0438\3\2\2\2\u0436\u0434\3\2\2\2\u0436")
        buf.write("\u0437\3\2\2\2\u0437\u00ad\3\2\2\2\u0438\u0436\3\2\2\2")
        buf.write("\u0439\u043a\5\u00d8m\2\u043a\u043b\7A\2\2\u043b\u043c")
        buf.write("\5r:\2\u043c\u00af\3\2\2\2\u043d\u0443\5\u00b8]\2\u043e")
        buf.write("\u043f\7\33\2\2\u043f\u0440\5\u00b8]\2\u0440\u0441\7\24")
        buf.write("\2\2\u0441\u0442\5\u00b0Y\2\u0442\u0444\3\2\2\2\u0443")
        buf.write("\u043e\3\2\2\2\u0443\u0444\3\2\2\2\u0444\u0447\3\2\2\2")
        buf.write("\u0445\u0447\5\u00b4[\2\u0446\u043d\3\2\2\2\u0446\u0445")
        buf.write("\3\2\2\2\u0447\u00b1\3\2\2\2\u0448\u044b\5\u00b8]\2\u0449")
        buf.write("\u044b\5\u00b6\\\2\u044a\u0448\3\2\2\2\u044a\u0449\3\2")
        buf.write("\2\2\u044b\u00b3\3\2\2\2\u044c\u044e\7\37\2\2\u044d\u044f")
        buf.write("\5\30\r\2\u044e\u044d\3\2\2\2\u044e\u044f\3\2\2\2\u044f")
        buf.write("\u0450\3\2\2\2\u0450\u0451\7>\2\2\u0451\u0452\5\u00b0")
        buf.write("Y\2\u0452\u00b5\3\2\2\2\u0453\u0455\7\37\2\2\u0454\u0456")
        buf.write("\5\30\r\2\u0455\u0454\3\2\2\2\u0455\u0456\3\2\2\2\u0456")
        buf.write("\u0457\3\2\2\2\u0457\u0458\7>\2\2\u0458\u0459\5\u00b2")
        buf.write("Z\2\u0459\u00b7\3\2\2\2\u045a\u045f\5\u00ba^\2\u045b\u045c")
        buf.write("\7$\2\2\u045c\u045e\5\u00ba^\2\u045d\u045b\3\2\2\2\u045e")
        buf.write("\u0461\3\2\2\2\u045f\u045d\3\2\2\2\u045f\u0460\3\2\2\2")
        buf.write("\u0460\u00b9\3\2\2\2\u0461\u045f\3\2\2\2\u0462\u0467\5")
        buf.write("\u00bc_\2\u0463\u0464\7\b\2\2\u0464\u0466\5\u00bc_\2\u0465")
        buf.write("\u0463\3\2\2\2\u0466\u0469\3\2\2\2\u0467\u0465\3\2\2\2")
        buf.write("\u0467\u0468\3\2\2\2\u0468\u00bb\3\2\2\2\u0469\u0467\3")
        buf.write("\2\2\2\u046a\u046b\7#\2\2\u046b\u046e\5\u00bc_\2\u046c")
        buf.write("\u046e\5\u00be`\2\u046d\u046a\3\2\2\2\u046d\u046c\3\2")
        buf.write("\2\2\u046e\u00bd\3\2\2\2\u046f\u0475\5\u00c4c\2\u0470")
        buf.write("\u0471\5\u00c0a\2\u0471\u0472\5\u00c4c\2\u0472\u0474\3")
        buf.write("\2\2\2\u0473\u0470\3\2\2\2\u0474\u0477\3\2\2\2\u0475\u0473")
        buf.write("\3\2\2\2\u0475\u0476\3\2\2\2\u0476\u00bf\3\2\2\2\u0477")
        buf.write("\u0475\3\2\2\2\u0478\u0486\7Q\2\2\u0479\u0486\7R\2\2\u047a")
        buf.write("\u0486\7S\2\2\u047b\u0486\7T\2\2\u047c\u0486\7U\2\2\u047d")
        buf.write("\u0486\7V\2\2\u047e\u0486\7W\2\2\u047f\u0486\7\35\2\2")
        buf.write("\u0480\u0481\7#\2\2\u0481\u0486\7\35\2\2\u0482\u0486\7")
        buf.write("\36\2\2\u0483\u0484\7\36\2\2\u0484\u0486\7#\2\2\u0485")
        buf.write("\u0478\3\2\2\2\u0485\u0479\3\2\2\2\u0485\u047a\3\2\2\2")
        buf.write("\u0485\u047b\3\2\2\2\u0485\u047c\3\2\2\2\u0485\u047d\3")
        buf.write("\2\2\2\u0485\u047e\3\2\2\2\u0485\u047f\3\2\2\2\u0485\u0480")
        buf.write("\3\2\2\2\u0485\u0482\3\2\2\2\u0485\u0483\3\2\2\2\u0486")
        buf.write("\u00c1\3\2\2\2\u0487\u0488\7:\2\2\u0488\u0489\5\u00c4")
        buf.write("c\2\u0489\u00c3\3\2\2\2\u048a\u048f\5\u00c6d\2\u048b\u048c")
        buf.write("\7D\2\2\u048c\u048e\5\u00c6d\2\u048d\u048b\3\2\2\2\u048e")
        buf.write("\u0491\3\2\2\2\u048f\u048d\3\2\2\2\u048f\u0490\3\2\2\2")
        buf.write("\u0490\u00c5\3\2\2\2\u0491\u048f\3\2\2\2\u0492\u0497\5")
        buf.write("\u00c8e\2\u0493\u0494\7E\2\2\u0494\u0496\5\u00c8e\2\u0495")
        buf.write("\u0493\3\2\2\2\u0496\u0499\3\2\2\2\u0497\u0495\3\2\2\2")
        buf.write("\u0497\u0498\3\2\2\2\u0498\u00c7\3\2\2\2\u0499\u0497\3")
        buf.write("\2\2\2\u049a\u049f\5\u00caf\2\u049b\u049c\7F\2\2\u049c")
        buf.write("\u049e\5\u00caf\2\u049d\u049b\3\2\2\2\u049e\u04a1\3\2")
        buf.write("\2\2\u049f\u049d\3\2\2\2\u049f\u04a0\3\2\2\2\u04a0\u00c9")
        buf.write("\3\2\2\2\u04a1\u049f\3\2\2\2\u04a2\u04a7\5\u00ccg\2\u04a3")
        buf.write("\u04a4\t\4\2\2\u04a4\u04a6\5\u00ccg\2\u04a5\u04a3\3\2")
        buf.write("\2\2\u04a6\u04a9\3\2\2\2\u04a7\u04a5\3\2\2\2\u04a7\u04a8")
        buf.write("\3\2\2\2\u04a8\u00cb\3\2\2\2\u04a9\u04a7\3\2\2\2\u04aa")
        buf.write("\u04af\5\u00ceh\2\u04ab\u04ac\t\5\2\2\u04ac\u04ae\5\u00ce")
        buf.write("h\2\u04ad\u04ab\3\2\2\2\u04ae\u04b1\3\2\2\2\u04af\u04ad")
        buf.write("\3\2\2\2\u04af\u04b0\3\2\2\2\u04b0\u00cd\3\2\2\2\u04b1")
        buf.write("\u04af\3\2\2\2\u04b2\u04b7\5\u00d0i\2\u04b3\u04b4\t\6")
        buf.write("\2\2\u04b4\u04b6\5\u00d0i\2\u04b5\u04b3\3\2\2\2\u04b6")
        buf.write("\u04b9\3\2\2\2\u04b7\u04b5\3\2\2\2\u04b7\u04b8\3\2\2\2")
        buf.write("\u04b8\u00cf\3\2\2\2\u04b9\u04b7\3\2\2\2\u04ba\u04bb\t")
        buf.write("\7\2\2\u04bb\u04be\5\u00d0i\2\u04bc\u04be\5\u00d2j\2\u04bd")
        buf.write("\u04ba\3\2\2\2\u04bd\u04bc\3\2\2\2\u04be\u00d1\3\2\2\2")
        buf.write("\u04bf\u04c2\5\u00d4k\2\u04c0\u04c1\7@\2\2\u04c1\u04c3")
        buf.write("\5\u00d0i\2\u04c2\u04c0\3\2\2\2\u04c2\u04c3\3\2\2\2\u04c3")
        buf.write("\u00d3\3\2\2\2\u04c4\u04c6\7\f\2\2\u04c5\u04c4\3\2\2\2")
        buf.write("\u04c5\u04c6\3\2\2\2\u04c6\u04c7\3\2\2\2\u04c7\u04cb\5")
        buf.write("\u00d6l\2\u04c8\u04ca\5\u00dco\2\u04c9\u04c8\3\2\2\2\u04ca")
        buf.write("\u04cd\3\2\2\2\u04cb\u04c9\3\2\2\2\u04cb\u04cc\3\2\2\2")
        buf.write("\u04cc\u00d5\3\2\2\2\u04cd\u04cb\3\2\2\2\u04ce\u04d1\7")
        buf.write(";\2\2\u04cf\u04d2\5\u00f8}\2\u04d0\u04d2\5\u00dan\2\u04d1")
        buf.write("\u04cf\3\2\2\2\u04d1\u04d0\3\2\2\2\u04d1\u04d2\3\2\2\2")
        buf.write("\u04d2\u04d3\3\2\2\2\u04d3\u04ea\7<\2\2\u04d4\u04d6\7")
        buf.write("B\2\2\u04d5\u04d7\5\u00dan\2\u04d6\u04d5\3\2\2\2\u04d6")
        buf.write("\u04d7\3\2\2\2\u04d7\u04d8\3\2\2\2\u04d8\u04ea\7C\2\2")
        buf.write("\u04d9\u04db\7O\2\2\u04da\u04dc\5\u00e8u\2\u04db\u04da")
        buf.write("\3\2\2\2\u04db\u04dc\3\2\2\2\u04dc\u04dd\3\2\2\2\u04dd")
        buf.write("\u04ea\7P\2\2\u04de\u04ea\5\u00d8m\2\u04df\u04ea\7\6\2")
        buf.write("\2\u04e0\u04e2\7\5\2\2\u04e1\u04e0\3\2\2\2\u04e2\u04e3")
        buf.write("\3\2\2\2\u04e3\u04e1\3\2\2\2\u04e3\u04e4\3\2\2\2\u04e4")
        buf.write("\u04ea\3\2\2\2\u04e5\u04ea\79\2\2\u04e6\u04ea\7!\2\2\u04e7")
        buf.write("\u04ea\7(\2\2\u04e8\u04ea\7\26\2\2\u04e9\u04ce\3\2\2\2")
        buf.write("\u04e9\u04d4\3\2\2\2\u04e9\u04d9\3\2\2\2\u04e9\u04de\3")
        buf.write("\2\2\2\u04e9\u04df\3\2\2\2\u04e9\u04e1\3\2\2\2\u04e9\u04e5")
        buf.write("\3\2\2\2\u04e9\u04e6\3\2\2\2\u04e9\u04e7\3\2\2\2\u04e9")
        buf.write("\u04e8\3\2\2\2\u04ea\u00d7\3\2\2\2\u04eb\u04ec\t\b\2\2")
        buf.write("\u04ec\u00d9\3\2\2\2\u04ed\u04f0\5\u00b0Y\2\u04ee\u04f0")
        buf.write("\5\u00c2b\2\u04ef\u04ed\3\2\2\2\u04ef\u04ee\3\2\2\2\u04f0")
        buf.write("\u04ff\3\2\2\2\u04f1\u0500\5\u00f2z\2\u04f2\u04f5\7=\2")
        buf.write("\2\u04f3\u04f6\5\u00b0Y\2\u04f4\u04f6\5\u00c2b\2\u04f5")
        buf.write("\u04f3\3\2\2\2\u04f5\u04f4\3\2\2\2\u04f6\u04f8\3\2\2\2")
        buf.write("\u04f7\u04f2\3\2\2\2\u04f8\u04fb\3\2\2\2\u04f9\u04f7\3")
        buf.write("\2\2\2\u04f9\u04fa\3\2\2\2\u04fa\u04fd\3\2\2\2\u04fb\u04f9")
        buf.write("\3\2\2\2\u04fc\u04fe\7=\2\2\u04fd\u04fc\3\2\2\2\u04fd")
        buf.write("\u04fe\3\2\2\2\u04fe\u0500\3\2\2\2\u04ff\u04f1\3\2\2\2")
        buf.write("\u04ff\u04f9\3\2\2\2\u0500\u00db\3\2\2\2\u0501\u0503\7")
        buf.write(";\2\2\u0502\u0504\5\u00ecw\2\u0503\u0502\3\2\2\2\u0503")
        buf.write("\u0504\3\2\2\2\u0504\u0505\3\2\2\2\u0505\u050d\7<\2\2")
        buf.write("\u0506\u0507\7B\2\2\u0507\u0508\5\u00dep\2\u0508\u0509")
        buf.write("\7C\2\2\u0509\u050d\3\2\2\2\u050a\u050b\78\2\2\u050b\u050d")
        buf.write("\5\u00d8m\2\u050c\u0501\3\2\2\2\u050c\u0506\3\2\2\2\u050c")
        buf.write("\u050a\3\2\2\2\u050d\u00dd\3\2\2\2\u050e\u0513\5\u00e0")
        buf.write("q\2\u050f\u0510\7=\2\2\u0510\u0512\5\u00e0q\2\u0511\u050f")
        buf.write("\3\2\2\2\u0512\u0515\3\2\2\2\u0513\u0511\3\2\2\2\u0513")
        buf.write("\u0514\3\2\2\2\u0514\u0517\3\2\2\2\u0515\u0513\3\2\2\2")
        buf.write("\u0516\u0518\7=\2\2\u0517\u0516\3\2\2\2\u0517\u0518\3")
        buf.write("\2\2\2\u0518\u00df\3\2\2\2\u0519\u0525\5\u00b0Y\2\u051a")
        buf.write("\u051c\5\u00b0Y\2\u051b\u051a\3\2\2\2\u051b\u051c\3\2")
        buf.write("\2\2\u051c\u051d\3\2\2\2\u051d\u051f\7>\2\2\u051e\u0520")
        buf.write("\5\u00b0Y\2\u051f\u051e\3\2\2\2\u051f\u0520\3\2\2\2\u0520")
        buf.write("\u0522\3\2\2\2\u0521\u0523\5\u00e2r\2\u0522\u0521\3\2")
        buf.write("\2\2\u0522\u0523\3\2\2\2\u0523\u0525\3\2\2\2\u0524\u0519")
        buf.write("\3\2\2\2\u0524\u051b\3\2\2\2\u0525\u00e1\3\2\2\2\u0526")
        buf.write("\u0528\7>\2\2\u0527\u0529\5\u00b0Y\2\u0528\u0527\3\2\2")
        buf.write("\2\u0528\u0529\3\2\2\2\u0529\u00e3\3\2\2\2\u052a\u052d")
        buf.write("\5\u00c4c\2\u052b\u052d\5\u00c2b\2\u052c\u052a\3\2\2\2")
        buf.write("\u052c\u052b\3\2\2\2\u052d\u0535\3\2\2\2\u052e\u0531\7")
        buf.write("=\2\2\u052f\u0532\5\u00c4c\2\u0530\u0532\5\u00c2b\2\u0531")
        buf.write("\u052f\3\2\2\2\u0531\u0530\3\2\2\2\u0532\u0534\3\2\2\2")
        buf.write("\u0533\u052e\3\2\2\2\u0534\u0537\3\2\2\2\u0535\u0533\3")
        buf.write("\2\2\2\u0535\u0536\3\2\2\2\u0536\u0539\3\2\2\2\u0537\u0535")
        buf.write("\3\2\2\2\u0538\u053a\7=\2\2\u0539\u0538\3\2\2\2\u0539")
        buf.write("\u053a\3\2\2\2\u053a\u00e5\3\2\2\2\u053b\u0540\5\u00b0")
        buf.write("Y\2\u053c\u053d\7=\2\2\u053d\u053f\5\u00b0Y\2\u053e\u053c")
        buf.write("\3\2\2\2\u053f\u0542\3\2\2\2\u0540\u053e\3\2\2\2\u0540")
        buf.write("\u0541\3\2\2\2\u0541\u0544\3\2\2\2\u0542\u0540\3\2\2\2")
        buf.write("\u0543\u0545\7=\2\2\u0544\u0543\3\2\2\2\u0544\u0545\3")
        buf.write("\2\2\2\u0545\u00e7\3\2\2\2\u0546\u0547\5\u00b0Y\2\u0547")
        buf.write("\u0548\7>\2\2\u0548\u0549\5\u00b0Y\2\u0549\u054d\3\2\2")
        buf.write("\2\u054a\u054b\7@\2\2\u054b\u054d\5\u00c4c\2\u054c\u0546")
        buf.write("\3\2\2\2\u054c\u054a\3\2\2\2\u054d\u0560\3\2\2\2\u054e")
        buf.write("\u0561\5\u00f2z\2\u054f\u0556\7=\2\2\u0550\u0551\5\u00b0")
        buf.write("Y\2\u0551\u0552\7>\2\2\u0552\u0553\5\u00b0Y\2\u0553\u0557")
        buf.write("\3\2\2\2\u0554\u0555\7@\2\2\u0555\u0557\5\u00c4c\2\u0556")
        buf.write("\u0550\3\2\2\2\u0556\u0554\3\2\2\2\u0557\u0559\3\2\2\2")
        buf.write("\u0558\u054f\3\2\2\2\u0559\u055c\3\2\2\2\u055a\u0558\3")
        buf.write("\2\2\2\u055a\u055b\3\2\2\2\u055b\u055e\3\2\2\2\u055c\u055a")
        buf.write("\3\2\2\2\u055d\u055f\7=\2\2\u055e\u055d\3\2\2\2\u055e")
        buf.write("\u055f\3\2\2\2\u055f\u0561\3\2\2\2\u0560\u054e\3\2\2\2")
        buf.write("\u0560\u055a\3\2\2\2\u0561\u0577\3\2\2\2\u0562\u0565\5")
        buf.write("\u00b0Y\2\u0563\u0565\5\u00c2b\2\u0564\u0562\3\2\2\2\u0564")
        buf.write("\u0563\3\2\2\2\u0565\u0574\3\2\2\2\u0566\u0575\5\u00f2")
        buf.write("z\2\u0567\u056a\7=\2\2\u0568\u056b\5\u00b0Y\2\u0569\u056b")
        buf.write("\5\u00c2b\2\u056a\u0568\3\2\2\2\u056a\u0569\3\2\2\2\u056b")
        buf.write("\u056d\3\2\2\2\u056c\u0567\3\2\2\2\u056d\u0570\3\2\2\2")
        buf.write("\u056e\u056c\3\2\2\2\u056e\u056f\3\2\2\2\u056f\u0572\3")
        buf.write("\2\2\2\u0570\u056e\3\2\2\2\u0571\u0573\7=\2\2\u0572\u0571")
        buf.write("\3\2\2\2\u0572\u0573\3\2\2\2\u0573\u0575\3\2\2\2\u0574")
        buf.write("\u0566\3\2\2\2\u0574\u056e\3\2\2\2\u0575\u0577\3\2\2\2")
        buf.write("\u0576\u054c\3\2\2\2\u0576\u0564\3\2\2\2\u0577\u00e9\3")
        buf.write("\2\2\2\u0578\u0579\7\17\2\2\u0579\u057f\5\u00d8m\2\u057a")
        buf.write("\u057c\7;\2\2\u057b\u057d\5\u00ecw\2\u057c\u057b\3\2\2")
        buf.write("\2\u057c\u057d\3\2\2\2\u057d\u057e\3\2\2\2\u057e\u0580")
        buf.write("\7<\2\2\u057f\u057a\3\2\2\2\u057f\u0580\3\2\2\2\u0580")
        buf.write("\u0581\3\2\2\2\u0581\u0582\7>\2\2\u0582\u0583\5b\62\2")
        buf.write("\u0583\u00eb\3\2\2\2\u0584\u0589\5\u00eex\2\u0585\u0586")
        buf.write("\7=\2\2\u0586\u0588\5\u00eex\2\u0587\u0585\3\2\2\2\u0588")
        buf.write("\u058b\3\2\2\2\u0589\u0587\3\2\2\2\u0589\u058a\3\2\2\2")
        buf.write("\u058a\u058d\3\2\2\2\u058b\u0589\3\2\2\2\u058c\u058e\7")
        buf.write("=\2\2\u058d\u058c\3\2\2\2\u058d\u058e\3\2\2\2\u058e\u00ed")
        buf.write("\3\2\2\2\u058f\u0591\5\u00b0Y\2\u0590\u0592\5\u00f2z\2")
        buf.write("\u0591\u0590\3\2\2\2\u0591\u0592\3\2\2\2\u0592\u059c\3")
        buf.write("\2\2\2\u0593\u0594\5\u00b0Y\2\u0594\u0595\7A\2\2\u0595")
        buf.write("\u0596\5\u00b0Y\2\u0596\u059c\3\2\2\2\u0597\u0598\7@\2")
        buf.write("\2\u0598\u059c\5\u00b0Y\2\u0599\u059a\7:\2\2\u059a\u059c")
        buf.write("\5\u00b0Y\2\u059b\u058f\3\2\2\2\u059b\u0593\3\2\2\2\u059b")
        buf.write("\u0597\3\2\2\2\u059b\u0599\3\2\2\2\u059c\u00ef\3\2\2\2")
        buf.write("\u059d\u05a0\5\u00f2z\2\u059e\u05a0\5\u00f4{\2\u059f\u059d")
        buf.write("\3\2\2\2\u059f\u059e\3\2\2\2\u05a0\u00f1\3\2\2\2\u05a1")
        buf.write("\u05a3\7\13\2\2\u05a2\u05a1\3\2\2\2\u05a2\u05a3\3\2\2")
        buf.write("\2\u05a3\u05a4\3\2\2\2\u05a4\u05a5\7\30\2\2\u05a5\u05a6")
        buf.write("\5\u00e4s\2\u05a6\u05a7\7\35\2\2\u05a7\u05a9\5\u00b8]")
        buf.write("\2\u05a8\u05aa\5\u00f0y\2\u05a9\u05a8\3\2\2\2\u05a9\u05aa")
        buf.write("\3\2\2\2\u05aa\u00f3\3\2\2\2\u05ab\u05ac\7\33\2\2\u05ac")
        buf.write("\u05ae\5\u00b2Z\2\u05ad\u05af\5\u00f0y\2\u05ae\u05ad\3")
        buf.write("\2\2\2\u05ae\u05af\3\2\2\2\u05af\u00f5\3\2\2\2\u05b0\u05b1")
        buf.write("\5\u00d8m\2\u05b1\u00f7\3\2\2\2\u05b2\u05b4\7-\2\2\u05b3")
        buf.write("\u05b5\5\u00fa~\2\u05b4\u05b3\3\2\2\2\u05b4\u05b5\3\2")
        buf.write("\2\2\u05b5\u00f9\3\2\2\2\u05b6\u05b7\7\31\2\2\u05b7\u05ba")
        buf.write("\5\u00b0Y\2\u05b8\u05ba\5\u00e6t\2\u05b9\u05b6\3\2\2\2")
        buf.write("\u05b9\u05b8\3\2\2\2\u05ba\u00fb\3\2\2\2\u05bb\u05bd\7")
        buf.write("\5\2\2\u05bc\u05bb\3\2\2\2\u05bd\u05be\3\2\2\2\u05be\u05bc")
        buf.write("\3\2\2\2\u05be\u05bf\3\2\2\2\u05bf\u00fd\3\2\2\2\u00cf")
        buf.write("\u0103\u0107\u0109\u0112\u011b\u011e\u0125\u012b\u0135")
        buf.write("\u013c\u0143\u0149\u014d\u0153\u0159\u015d\u0164\u0166")
        buf.write("\u0168\u016d\u016f\u0171\u0175\u017b\u017f\u0186\u0188")
        buf.write("\u018a\u018f\u0191\u0196\u019b\u01a1\u01a5\u01ab\u01b1")
        buf.write("\u01b5\u01bc\u01be\u01c0\u01c5\u01c7\u01c9\u01cd\u01d3")
        buf.write("\u01d7\u01de\u01e0\u01e2\u01e7\u01e9\u01ef\u01f6\u01fa")
        buf.write("\u0206\u020d\u0212\u0216\u0219\u021f\u0223\u0228\u022c")
        buf.write("\u0230\u023e\u0246\u024e\u0250\u0254\u025d\u0264\u0266")
        buf.write("\u026f\u0274\u0279\u0280\u0284\u028b\u0293\u029c\u02a5")
        buf.write("\u02ac\u02b8\u02be\u02cb\u02d1\u02da\u02e5\u02f0\u02f5")
        buf.write("\u02fa\u02ff\u0307\u0310\u0316\u0318\u0320\u0324\u032e")
        buf.write("\u0335\u0338\u033e\u0341\u0346\u034b\u0355\u0359\u0364")
        buf.write("\u036f\u0379\u0383\u038d\u0392\u0397\u03ac\u03b0\u03b8")
        buf.write("\u03bd\u03c0\u03c5\u03cc\u03d0\u03d4\u03da\u03e1\u03ea")
        buf.write("\u03f1\u03f5\u03fc\u0401\u0411\u0419\u0423\u0427\u042e")
        buf.write("\u0436\u0443\u0446\u044a\u044e\u0455\u045f\u0467\u046d")
        buf.write("\u0475\u0485\u048f\u0497\u049f\u04a7\u04af\u04b7\u04bd")
        buf.write("\u04c2\u04c5\u04cb\u04d1\u04d6\u04db\u04e3\u04e9\u04ef")
        buf.write("\u04f5\u04f9\u04fd\u04ff\u0503\u050c\u0513\u0517\u051b")
        buf.write("\u051f\u0522\u0524\u0528\u052c\u0531\u0535\u0539\u0540")
        buf.write("\u0544\u054c\u0556\u055a\u055e\u0560\u0564\u056a\u056e")
        buf.write("\u0572\u0574\u0576\u057c\u057f\u0589\u058d\u0591\u059b")
        buf.write("\u059f\u05a2\u05a9\u05ae\u05b4\u05b9\u05be")
        return buf.getvalue()


class Python3Parser ( Python3ParserBase ):

    grammarFileName = "Python3Parser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'and'", "'as'", "'assert'", 
                     "'async'", "'await'", "'break'", "'case'", "'class'", 
                     "'continue'", "'def'", "'del'", "'elif'", "'else'", 
                     "'except'", "'False'", "'finally'", "'for'", "'from'", 
                     "'global'", "'if'", "'import'", "'in'", "'is'", "'lambda'", 
                     "'match'", "'None'", "'nonlocal'", "'not'", "'or'", 
                     "'pass'", "'raise'", "'return'", "'True'", "'try'", 
                     "'_'", "'while'", "'with'", "'yield'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'.'", "'...'", "'*'", "'('", "')'", "','", 
                     "':'", "';'", "'**'", "'='", "'['", "']'", "'|'", "'^'", 
                     "'&'", "'<<'", "'>>'", "'+'", "'-'", "'/'", "'%'", 
                     "'//'", "'~'", "'{'", "'}'", "'<'", "'>'", "'=='", 
                     "'>='", "'<='", "'<>'", "'!='", "'@'", "'->'", "'+='", 
                     "'-='", "'*='", "'@='", "'/='", "'%='", "'&='", "'|='", 
                     "'^='", "'<<='", "'>>='", "'**='", "'//='" ]

    symbolicNames = [ "<INVALID>", "INDENT", "DEDENT", "STRING", "NUMBER", 
                      "INTEGER", "AND", "AS", "ASSERT", "ASYNC", "AWAIT", 
                      "BREAK", "CASE", "CLASS", "CONTINUE", "DEF", "DEL", 
                      "ELIF", "ELSE", "EXCEPT", "FALSE", "FINALLY", "FOR", 
                      "FROM", "GLOBAL", "IF", "IMPORT", "IN", "IS", "LAMBDA", 
                      "MATCH", "NONE", "NONLOCAL", "NOT", "OR", "PASS", 
                      "RAISE", "RETURN", "TRUE", "TRY", "UNDERSCORE", "WHILE", 
                      "WITH", "YIELD", "NEWLINE", "NAME", "STRING_LITERAL", 
                      "BYTES_LITERAL", "DECIMAL_INTEGER", "OCT_INTEGER", 
                      "HEX_INTEGER", "BIN_INTEGER", "FLOAT_NUMBER", "IMAG_NUMBER", 
                      "DOT", "ELLIPSIS", "STAR", "OPEN_PAREN", "CLOSE_PAREN", 
                      "COMMA", "COLON", "SEMI_COLON", "POWER", "ASSIGN", 
                      "OPEN_BRACK", "CLOSE_BRACK", "OR_OP", "XOR", "AND_OP", 
                      "LEFT_SHIFT", "RIGHT_SHIFT", "ADD", "MINUS", "DIV", 
                      "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", "CLOSE_BRACE", 
                      "LESS_THAN", "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", 
                      "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", "ADD_ASSIGN", 
                      "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", 
                      "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
                      "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", 
                      "IDIV_ASSIGN", "SKIP_", "UNKNOWN_CHAR" ]

    RULE_single_input = 0
    RULE_file_input = 1
    RULE_eval_input = 2
    RULE_decorator = 3
    RULE_decorators = 4
    RULE_decorated = 5
    RULE_async_funcdef = 6
    RULE_funcdef = 7
    RULE_parameters = 8
    RULE_typedargslist = 9
    RULE_tfpdef = 10
    RULE_varargslist = 11
    RULE_vfpdef = 12
    RULE_stmt = 13
    RULE_simple_stmts = 14
    RULE_simple_stmt = 15
    RULE_expr_stmt = 16
    RULE_annassign = 17
    RULE_testlist_star_expr = 18
    RULE_augassign = 19
    RULE_del_stmt = 20
    RULE_pass_stmt = 21
    RULE_flow_stmt = 22
    RULE_break_stmt = 23
    RULE_continue_stmt = 24
    RULE_return_stmt = 25
    RULE_yield_stmt = 26
    RULE_raise_stmt = 27
    RULE_import_stmt = 28
    RULE_import_name = 29
    RULE_import_from = 30
    RULE_import_as_name = 31
    RULE_dotted_as_name = 32
    RULE_import_as_names = 33
    RULE_dotted_as_names = 34
    RULE_dotted_name = 35
    RULE_global_stmt = 36
    RULE_nonlocal_stmt = 37
    RULE_assert_stmt = 38
    RULE_compound_stmt = 39
    RULE_async_stmt = 40
    RULE_if_stmt = 41
    RULE_while_stmt = 42
    RULE_for_stmt = 43
    RULE_try_stmt = 44
    RULE_with_stmt = 45
    RULE_with_item = 46
    RULE_except_clause = 47
    RULE_block = 48
    RULE_match_stmt = 49
    RULE_subject_expr = 50
    RULE_star_named_expressions = 51
    RULE_star_named_expression = 52
    RULE_case_block = 53
    RULE_guard = 54
    RULE_patterns = 55
    RULE_pattern = 56
    RULE_as_pattern = 57
    RULE_or_pattern = 58
    RULE_closed_pattern = 59
    RULE_literal_pattern = 60
    RULE_literal_expr = 61
    RULE_complex_number = 62
    RULE_signed_number = 63
    RULE_signed_real_number = 64
    RULE_real_number = 65
    RULE_imaginary_number = 66
    RULE_capture_pattern = 67
    RULE_pattern_capture_target = 68
    RULE_wildcard_pattern = 69
    RULE_value_pattern = 70
    RULE_attr = 71
    RULE_name_or_attr = 72
    RULE_group_pattern = 73
    RULE_sequence_pattern = 74
    RULE_open_sequence_pattern = 75
    RULE_maybe_sequence_pattern = 76
    RULE_maybe_star_pattern = 77
    RULE_star_pattern = 78
    RULE_mapping_pattern = 79
    RULE_items_pattern = 80
    RULE_key_value_pattern = 81
    RULE_double_star_pattern = 82
    RULE_class_pattern = 83
    RULE_positional_patterns = 84
    RULE_keyword_patterns = 85
    RULE_keyword_pattern = 86
    RULE_test = 87
    RULE_test_nocond = 88
    RULE_lambdef = 89
    RULE_lambdef_nocond = 90
    RULE_or_test = 91
    RULE_and_test = 92
    RULE_not_test = 93
    RULE_comparison = 94
    RULE_comp_op = 95
    RULE_star_expr = 96
    RULE_expr = 97
    RULE_xor_expr = 98
    RULE_and_expr = 99
    RULE_shift_expr = 100
    RULE_arith_expr = 101
    RULE_term = 102
    RULE_factor = 103
    RULE_power = 104
    RULE_atom_expr = 105
    RULE_atom = 106
    RULE_name = 107
    RULE_testlist_comp = 108
    RULE_trailer = 109
    RULE_subscriptlist = 110
    RULE_subscript_ = 111
    RULE_sliceop = 112
    RULE_exprlist = 113
    RULE_testlist = 114
    RULE_dictorsetmaker = 115
    RULE_classdef = 116
    RULE_arglist = 117
    RULE_argument = 118
    RULE_comp_iter = 119
    RULE_comp_for = 120
    RULE_comp_if = 121
    RULE_encoding_decl = 122
    RULE_yield_expr = 123
    RULE_yield_arg = 124
    RULE_strings = 125

    ruleNames =  [ "single_input", "file_input", "eval_input", "decorator", 
                   "decorators", "decorated", "async_funcdef", "funcdef", 
                   "parameters", "typedargslist", "tfpdef", "varargslist", 
                   "vfpdef", "stmt", "simple_stmts", "simple_stmt", "expr_stmt", 
                   "annassign", "testlist_star_expr", "augassign", "del_stmt", 
                   "pass_stmt", "flow_stmt", "break_stmt", "continue_stmt", 
                   "return_stmt", "yield_stmt", "raise_stmt", "import_stmt", 
                   "import_name", "import_from", "import_as_name", "dotted_as_name", 
                   "import_as_names", "dotted_as_names", "dotted_name", 
                   "global_stmt", "nonlocal_stmt", "assert_stmt", "compound_stmt", 
                   "async_stmt", "if_stmt", "while_stmt", "for_stmt", "try_stmt", 
                   "with_stmt", "with_item", "except_clause", "block", "match_stmt", 
                   "subject_expr", "star_named_expressions", "star_named_expression", 
                   "case_block", "guard", "patterns", "pattern", "as_pattern", 
                   "or_pattern", "closed_pattern", "literal_pattern", "literal_expr", 
                   "complex_number", "signed_number", "signed_real_number", 
                   "real_number", "imaginary_number", "capture_pattern", 
                   "pattern_capture_target", "wildcard_pattern", "value_pattern", 
                   "attr", "name_or_attr", "group_pattern", "sequence_pattern", 
                   "open_sequence_pattern", "maybe_sequence_pattern", "maybe_star_pattern", 
                   "star_pattern", "mapping_pattern", "items_pattern", "key_value_pattern", 
                   "double_star_pattern", "class_pattern", "positional_patterns", 
                   "keyword_patterns", "keyword_pattern", "test", "test_nocond", 
                   "lambdef", "lambdef_nocond", "or_test", "and_test", "not_test", 
                   "comparison", "comp_op", "star_expr", "expr", "xor_expr", 
                   "and_expr", "shift_expr", "arith_expr", "term", "factor", 
                   "power", "atom_expr", "atom", "name", "testlist_comp", 
                   "trailer", "subscriptlist", "subscript_", "sliceop", 
                   "exprlist", "testlist", "dictorsetmaker", "classdef", 
                   "arglist", "argument", "comp_iter", "comp_for", "comp_if", 
                   "encoding_decl", "yield_expr", "yield_arg", "strings" ]

    EOF = Token.EOF
    INDENT=1
    DEDENT=2
    STRING=3
    NUMBER=4
    INTEGER=5
    AND=6
    AS=7
    ASSERT=8
    ASYNC=9
    AWAIT=10
    BREAK=11
    CASE=12
    CLASS=13
    CONTINUE=14
    DEF=15
    DEL=16
    ELIF=17
    ELSE=18
    EXCEPT=19
    FALSE=20
    FINALLY=21
    FOR=22
    FROM=23
    GLOBAL=24
    IF=25
    IMPORT=26
    IN=27
    IS=28
    LAMBDA=29
    MATCH=30
    NONE=31
    NONLOCAL=32
    NOT=33
    OR=34
    PASS=35
    RAISE=36
    RETURN=37
    TRUE=38
    TRY=39
    UNDERSCORE=40
    WHILE=41
    WITH=42
    YIELD=43
    NEWLINE=44
    NAME=45
    STRING_LITERAL=46
    BYTES_LITERAL=47
    DECIMAL_INTEGER=48
    OCT_INTEGER=49
    HEX_INTEGER=50
    BIN_INTEGER=51
    FLOAT_NUMBER=52
    IMAG_NUMBER=53
    DOT=54
    ELLIPSIS=55
    STAR=56
    OPEN_PAREN=57
    CLOSE_PAREN=58
    COMMA=59
    COLON=60
    SEMI_COLON=61
    POWER=62
    ASSIGN=63
    OPEN_BRACK=64
    CLOSE_BRACK=65
    OR_OP=66
    XOR=67
    AND_OP=68
    LEFT_SHIFT=69
    RIGHT_SHIFT=70
    ADD=71
    MINUS=72
    DIV=73
    MOD=74
    IDIV=75
    NOT_OP=76
    OPEN_BRACE=77
    CLOSE_BRACE=78
    LESS_THAN=79
    GREATER_THAN=80
    EQUALS=81
    GT_EQ=82
    LT_EQ=83
    NOT_EQ_1=84
    NOT_EQ_2=85
    AT=86
    ARROW=87
    ADD_ASSIGN=88
    SUB_ASSIGN=89
    MULT_ASSIGN=90
    AT_ASSIGN=91
    DIV_ASSIGN=92
    MOD_ASSIGN=93
    AND_ASSIGN=94
    OR_ASSIGN=95
    XOR_ASSIGN=96
    LEFT_SHIFT_ASSIGN=97
    RIGHT_SHIFT_ASSIGN=98
    POWER_ASSIGN=99
    IDIV_ASSIGN=100
    SKIP_=101
    UNKNOWN_CHAR=102

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class Single_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def simple_stmts(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtsContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_single_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_input" ):
                listener.enterSingle_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_input" ):
                listener.exitSingle_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_input" ):
                return visitor.visitSingle_input(self)
            else:
                return visitor.visitChildren(self)




    def single_input(self):

        localctx = Python3Parser.Single_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_single_input)
        try:
            self.state = 257
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 252
                self.match(Python3Parser.NEWLINE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 253
                self.simple_stmts()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 254
                self.compound_stmt()
                self.state = 255
                self.match(Python3Parser.NEWLINE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class File_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(Python3Parser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_file_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_input" ):
                listener.enterFile_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_input" ):
                listener.exitFile_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_input" ):
                return visitor.visitFile_input(self)
            else:
                return visitor.visitChildren(self)




    def file_input(self):

        localctx = Python3Parser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_file_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.ASSERT) | (1 << Python3Parser.ASYNC) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.BREAK) | (1 << Python3Parser.CLASS) | (1 << Python3Parser.CONTINUE) | (1 << Python3Parser.DEF) | (1 << Python3Parser.DEL) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.FOR) | (1 << Python3Parser.FROM) | (1 << Python3Parser.GLOBAL) | (1 << Python3Parser.IF) | (1 << Python3Parser.IMPORT) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NONLOCAL) | (1 << Python3Parser.NOT) | (1 << Python3Parser.PASS) | (1 << Python3Parser.RAISE) | (1 << Python3Parser.RETURN) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.TRY) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.WHILE) | (1 << Python3Parser.WITH) | (1 << Python3Parser.YIELD) | (1 << Python3Parser.NEWLINE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.ADD - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.NOT_OP - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)) | (1 << (Python3Parser.AT - 64)))) != 0):
                self.state = 261
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.NEWLINE]:
                    self.state = 259
                    self.match(Python3Parser.NEWLINE)
                    pass
                elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.ASSERT, Python3Parser.ASYNC, Python3Parser.AWAIT, Python3Parser.BREAK, Python3Parser.CLASS, Python3Parser.CONTINUE, Python3Parser.DEF, Python3Parser.DEL, Python3Parser.FALSE, Python3Parser.FOR, Python3Parser.FROM, Python3Parser.GLOBAL, Python3Parser.IF, Python3Parser.IMPORT, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NONLOCAL, Python3Parser.NOT, Python3Parser.PASS, Python3Parser.RAISE, Python3Parser.RETURN, Python3Parser.TRUE, Python3Parser.TRY, Python3Parser.UNDERSCORE, Python3Parser.WHILE, Python3Parser.WITH, Python3Parser.YIELD, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.AT]:
                    self.state = 260
                    self.stmt()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 265
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 266
            self.match(Python3Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Eval_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def EOF(self):
            return self.getToken(Python3Parser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_eval_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_input" ):
                listener.enterEval_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_input" ):
                listener.exitEval_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEval_input" ):
                return visitor.visitEval_input(self)
            else:
                return visitor.visitChildren(self)




    def eval_input(self):

        localctx = Python3Parser.Eval_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_eval_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 268
            self.testlist()
            self.state = 272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.NEWLINE:
                self.state = 269
                self.match(Python3Parser.NEWLINE)
                self.state = 274
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 275
            self.match(Python3Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(Python3Parser.AT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_nameContext,0)


        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_decorator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorator" ):
                listener.enterDecorator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorator" ):
                listener.exitDecorator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorator" ):
                return visitor.visitDecorator(self)
            else:
                return visitor.visitChildren(self)




    def decorator(self):

        localctx = Python3Parser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_decorator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 277
            self.match(Python3Parser.AT)
            self.state = 278
            self.dotted_name()
            self.state = 284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.OPEN_PAREN:
                self.state = 279
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.POWER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.ADD - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.NOT_OP - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)))) != 0):
                    self.state = 280
                    self.arglist()


                self.state = 283
                self.match(Python3Parser.CLOSE_PAREN)


            self.state = 286
            self.match(Python3Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratorsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.DecoratorContext)
            else:
                return self.getTypedRuleContext(Python3Parser.DecoratorContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_decorators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorators" ):
                listener.enterDecorators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorators" ):
                listener.exitDecorators(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorators" ):
                return visitor.visitDecorators(self)
            else:
                return visitor.visitChildren(self)




    def decorators(self):

        localctx = Python3Parser.DecoratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_decorators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 289 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 288
                self.decorator()
                self.state = 291 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==Python3Parser.AT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorators(self):
            return self.getTypedRuleContext(Python3Parser.DecoratorsContext,0)


        def classdef(self):
            return self.getTypedRuleContext(Python3Parser.ClassdefContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def async_funcdef(self):
            return self.getTypedRuleContext(Python3Parser.Async_funcdefContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_decorated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorated" ):
                listener.enterDecorated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorated" ):
                listener.exitDecorated(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorated" ):
                return visitor.visitDecorated(self)
            else:
                return visitor.visitChildren(self)




    def decorated(self):

        localctx = Python3Parser.DecoratedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_decorated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 293
            self.decorators()
            self.state = 297
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.CLASS]:
                self.state = 294
                self.classdef()
                pass
            elif token in [Python3Parser.DEF]:
                self.state = 295
                self.funcdef()
                pass
            elif token in [Python3Parser.ASYNC]:
                self.state = 296
                self.async_funcdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Async_funcdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(Python3Parser.ASYNC, 0)

        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_async_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsync_funcdef" ):
                listener.enterAsync_funcdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsync_funcdef" ):
                listener.exitAsync_funcdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsync_funcdef" ):
                return visitor.visitAsync_funcdef(self)
            else:
                return visitor.visitChildren(self)




    def async_funcdef(self):

        localctx = Python3Parser.Async_funcdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_async_funcdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            self.match(Python3Parser.ASYNC)
            self.state = 300
            self.funcdef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FuncdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(Python3Parser.DEF, 0)

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def parameters(self):
            return self.getTypedRuleContext(Python3Parser.ParametersContext,0)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(Python3Parser.BlockContext,0)


        def ARROW(self):
            return self.getToken(Python3Parser.ARROW, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncdef" ):
                listener.enterFuncdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncdef" ):
                listener.exitFuncdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncdef" ):
                return visitor.visitFuncdef(self)
            else:
                return visitor.visitChildren(self)




    def funcdef(self):

        localctx = Python3Parser.FuncdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_funcdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 302
            self.match(Python3Parser.DEF)
            self.state = 303
            self.name()
            self.state = 304
            self.parameters()
            self.state = 307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ARROW:
                self.state = 305
                self.match(Python3Parser.ARROW)
                self.state = 306
                self.test()


            self.state = 309
            self.match(Python3Parser.COLON)
            self.state = 310
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def typedargslist(self):
            return self.getTypedRuleContext(Python3Parser.TypedargslistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameters" ):
                listener.enterParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameters" ):
                listener.exitParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameters" ):
                return visitor.visitParameters(self)
            else:
                return visitor.visitChildren(self)




    def parameters(self):

        localctx = Python3Parser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            self.match(Python3Parser.OPEN_PAREN)
            self.state = 314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.MATCH) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0):
                self.state = 313
                self.typedargslist()


            self.state = 316
            self.match(Python3Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedargslistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TfpdefContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TfpdefContext,i)


        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ASSIGN)
            else:
                return self.getToken(Python3Parser.ASSIGN, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_typedargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedargslist" ):
                listener.enterTypedargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedargslist" ):
                listener.exitTypedargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedargslist" ):
                return visitor.visitTypedargslist(self)
            else:
                return visitor.visitChildren(self)




    def typedargslist(self):

        localctx = Python3Parser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_typedargslist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.MATCH, Python3Parser.UNDERSCORE, Python3Parser.NAME]:
                self.state = 318
                self.tfpdef()
                self.state = 321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.ASSIGN:
                    self.state = 319
                    self.match(Python3Parser.ASSIGN)
                    self.state = 320
                    self.test()


                self.state = 331
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 323
                        self.match(Python3Parser.COMMA)
                        self.state = 324
                        self.tfpdef()
                        self.state = 327
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.ASSIGN:
                            self.state = 325
                            self.match(Python3Parser.ASSIGN)
                            self.state = 326
                            self.test()

                 
                    self.state = 333
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

                self.state = 367
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 334
                    self.match(Python3Parser.COMMA)
                    self.state = 365
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.STAR]:
                        self.state = 335
                        self.match(Python3Parser.STAR)
                        self.state = 337
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.MATCH) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME))) != 0):
                            self.state = 336
                            self.tfpdef()


                        self.state = 347
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 339
                                self.match(Python3Parser.COMMA)
                                self.state = 340
                                self.tfpdef()
                                self.state = 343
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==Python3Parser.ASSIGN:
                                    self.state = 341
                                    self.match(Python3Parser.ASSIGN)
                                    self.state = 342
                                    self.test()

                         
                            self.state = 349
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

                        self.state = 358
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 350
                            self.match(Python3Parser.COMMA)
                            self.state = 356
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==Python3Parser.POWER:
                                self.state = 351
                                self.match(Python3Parser.POWER)
                                self.state = 352
                                self.tfpdef()
                                self.state = 354
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==Python3Parser.COMMA:
                                    self.state = 353
                                    self.match(Python3Parser.COMMA)






                        pass
                    elif token in [Python3Parser.POWER]:
                        self.state = 360
                        self.match(Python3Parser.POWER)
                        self.state = 361
                        self.tfpdef()
                        self.state = 363
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 362
                            self.match(Python3Parser.COMMA)


                        pass
                    elif token in [Python3Parser.CLOSE_PAREN]:
                        pass
                    else:
                        pass


                pass
            elif token in [Python3Parser.STAR]:
                self.state = 369
                self.match(Python3Parser.STAR)
                self.state = 371
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.MATCH) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME))) != 0):
                    self.state = 370
                    self.tfpdef()


                self.state = 381
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 373
                        self.match(Python3Parser.COMMA)
                        self.state = 374
                        self.tfpdef()
                        self.state = 377
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.ASSIGN:
                            self.state = 375
                            self.match(Python3Parser.ASSIGN)
                            self.state = 376
                            self.test()

                 
                    self.state = 383
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

                self.state = 392
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 384
                    self.match(Python3Parser.COMMA)
                    self.state = 390
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Python3Parser.POWER:
                        self.state = 385
                        self.match(Python3Parser.POWER)
                        self.state = 386
                        self.tfpdef()
                        self.state = 388
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 387
                            self.match(Python3Parser.COMMA)






                pass
            elif token in [Python3Parser.POWER]:
                self.state = 394
                self.match(Python3Parser.POWER)
                self.state = 395
                self.tfpdef()
                self.state = 397
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 396
                    self.match(Python3Parser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TfpdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_tfpdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTfpdef" ):
                listener.enterTfpdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTfpdef" ):
                listener.exitTfpdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTfpdef" ):
                return visitor.visitTfpdef(self)
            else:
                return visitor.visitChildren(self)




    def tfpdef(self):

        localctx = Python3Parser.TfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_tfpdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.name()
            self.state = 404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COLON:
                self.state = 402
                self.match(Python3Parser.COLON)
                self.state = 403
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarargslistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.VfpdefContext)
            else:
                return self.getTypedRuleContext(Python3Parser.VfpdefContext,i)


        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ASSIGN)
            else:
                return self.getToken(Python3Parser.ASSIGN, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_varargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargslist" ):
                listener.enterVarargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargslist" ):
                listener.exitVarargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarargslist" ):
                return visitor.visitVarargslist(self)
            else:
                return visitor.visitChildren(self)




    def varargslist(self):

        localctx = Python3Parser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_varargslist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.MATCH, Python3Parser.UNDERSCORE, Python3Parser.NAME]:
                self.state = 406
                self.vfpdef()
                self.state = 409
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.ASSIGN:
                    self.state = 407
                    self.match(Python3Parser.ASSIGN)
                    self.state = 408
                    self.test()


                self.state = 419
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 411
                        self.match(Python3Parser.COMMA)
                        self.state = 412
                        self.vfpdef()
                        self.state = 415
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.ASSIGN:
                            self.state = 413
                            self.match(Python3Parser.ASSIGN)
                            self.state = 414
                            self.test()

                 
                    self.state = 421
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

                self.state = 455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 422
                    self.match(Python3Parser.COMMA)
                    self.state = 453
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.STAR]:
                        self.state = 423
                        self.match(Python3Parser.STAR)
                        self.state = 425
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.MATCH) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME))) != 0):
                            self.state = 424
                            self.vfpdef()


                        self.state = 435
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 427
                                self.match(Python3Parser.COMMA)
                                self.state = 428
                                self.vfpdef()
                                self.state = 431
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==Python3Parser.ASSIGN:
                                    self.state = 429
                                    self.match(Python3Parser.ASSIGN)
                                    self.state = 430
                                    self.test()

                         
                            self.state = 437
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                        self.state = 446
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 438
                            self.match(Python3Parser.COMMA)
                            self.state = 444
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==Python3Parser.POWER:
                                self.state = 439
                                self.match(Python3Parser.POWER)
                                self.state = 440
                                self.vfpdef()
                                self.state = 442
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==Python3Parser.COMMA:
                                    self.state = 441
                                    self.match(Python3Parser.COMMA)






                        pass
                    elif token in [Python3Parser.POWER]:
                        self.state = 448
                        self.match(Python3Parser.POWER)
                        self.state = 449
                        self.vfpdef()
                        self.state = 451
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 450
                            self.match(Python3Parser.COMMA)


                        pass
                    elif token in [Python3Parser.COLON]:
                        pass
                    else:
                        pass


                pass
            elif token in [Python3Parser.STAR]:
                self.state = 457
                self.match(Python3Parser.STAR)
                self.state = 459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.MATCH) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME))) != 0):
                    self.state = 458
                    self.vfpdef()


                self.state = 469
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 461
                        self.match(Python3Parser.COMMA)
                        self.state = 462
                        self.vfpdef()
                        self.state = 465
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.ASSIGN:
                            self.state = 463
                            self.match(Python3Parser.ASSIGN)
                            self.state = 464
                            self.test()

                 
                    self.state = 471
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

                self.state = 480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 472
                    self.match(Python3Parser.COMMA)
                    self.state = 478
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Python3Parser.POWER:
                        self.state = 473
                        self.match(Python3Parser.POWER)
                        self.state = 474
                        self.vfpdef()
                        self.state = 476
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 475
                            self.match(Python3Parser.COMMA)






                pass
            elif token in [Python3Parser.POWER]:
                self.state = 482
                self.match(Python3Parser.POWER)
                self.state = 483
                self.vfpdef()
                self.state = 485
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 484
                    self.match(Python3Parser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VfpdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_vfpdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVfpdef" ):
                listener.enterVfpdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVfpdef" ):
                listener.exitVfpdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfpdef" ):
                return visitor.visitVfpdef(self)
            else:
                return visitor.visitChildren(self)




    def vfpdef(self):

        localctx = Python3Parser.VfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_vfpdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmts(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtsContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt" ):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)




    def stmt(self):

        localctx = Python3Parser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_stmt)
        try:
            self.state = 493
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 491
                self.simple_stmts()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 492
                self.compound_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_stmtsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Simple_stmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Simple_stmtContext,i)


        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.SEMI_COLON)
            else:
                return self.getToken(Python3Parser.SEMI_COLON, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_simple_stmts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_stmts" ):
                listener.enterSimple_stmts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_stmts" ):
                listener.exitSimple_stmts(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_stmts" ):
                return visitor.visitSimple_stmts(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmts(self):

        localctx = Python3Parser.Simple_stmtsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_simple_stmts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495
            self.simple_stmt()
            self.state = 500
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 496
                    self.match(Python3Parser.SEMI_COLON)
                    self.state = 497
                    self.simple_stmt() 
                self.state = 502
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

            self.state = 504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.SEMI_COLON:
                self.state = 503
                self.match(Python3Parser.SEMI_COLON)


            self.state = 506
            self.match(Python3Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Expr_stmtContext,0)


        def del_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Del_stmtContext,0)


        def pass_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Pass_stmtContext,0)


        def flow_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Flow_stmtContext,0)


        def import_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Import_stmtContext,0)


        def global_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Global_stmtContext,0)


        def nonlocal_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Nonlocal_stmtContext,0)


        def assert_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Assert_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_simple_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_stmt" ):
                listener.enterSimple_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_stmt" ):
                listener.exitSimple_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_stmt" ):
                return visitor.visitSimple_stmt(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmt(self):

        localctx = Python3Parser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_simple_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.state = 508
                self.expr_stmt()
                pass
            elif token in [Python3Parser.DEL]:
                self.state = 509
                self.del_stmt()
                pass
            elif token in [Python3Parser.PASS]:
                self.state = 510
                self.pass_stmt()
                pass
            elif token in [Python3Parser.BREAK, Python3Parser.CONTINUE, Python3Parser.RAISE, Python3Parser.RETURN, Python3Parser.YIELD]:
                self.state = 511
                self.flow_stmt()
                pass
            elif token in [Python3Parser.FROM, Python3Parser.IMPORT]:
                self.state = 512
                self.import_stmt()
                pass
            elif token in [Python3Parser.GLOBAL]:
                self.state = 513
                self.global_stmt()
                pass
            elif token in [Python3Parser.NONLOCAL]:
                self.state = 514
                self.nonlocal_stmt()
                pass
            elif token in [Python3Parser.ASSERT]:
                self.state = 515
                self.assert_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist_star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Testlist_star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Testlist_star_exprContext,i)


        def annassign(self):
            return self.getTypedRuleContext(Python3Parser.AnnassignContext,0)


        def augassign(self):
            return self.getTypedRuleContext(Python3Parser.AugassignContext,0)


        def yield_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Yield_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Yield_exprContext,i)


        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ASSIGN)
            else:
                return self.getToken(Python3Parser.ASSIGN, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_expr_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_stmt" ):
                listener.enterExpr_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_stmt" ):
                listener.exitExpr_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_stmt" ):
                return visitor.visitExpr_stmt(self)
            else:
                return visitor.visitChildren(self)




    def expr_stmt(self):

        localctx = Python3Parser.Expr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_expr_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 518
            self.testlist_star_expr()
            self.state = 535
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.COLON]:
                self.state = 519
                self.annassign()
                pass
            elif token in [Python3Parser.ADD_ASSIGN, Python3Parser.SUB_ASSIGN, Python3Parser.MULT_ASSIGN, Python3Parser.AT_ASSIGN, Python3Parser.DIV_ASSIGN, Python3Parser.MOD_ASSIGN, Python3Parser.AND_ASSIGN, Python3Parser.OR_ASSIGN, Python3Parser.XOR_ASSIGN, Python3Parser.LEFT_SHIFT_ASSIGN, Python3Parser.RIGHT_SHIFT_ASSIGN, Python3Parser.POWER_ASSIGN, Python3Parser.IDIV_ASSIGN]:
                self.state = 520
                self.augassign()
                self.state = 523
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.YIELD]:
                    self.state = 521
                    self.yield_expr()
                    pass
                elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                    self.state = 522
                    self.testlist()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [Python3Parser.NEWLINE, Python3Parser.SEMI_COLON, Python3Parser.ASSIGN]:
                self.state = 532
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==Python3Parser.ASSIGN:
                    self.state = 525
                    self.match(Python3Parser.ASSIGN)
                    self.state = 528
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.YIELD]:
                        self.state = 526
                        self.yield_expr()
                        pass
                    elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                        self.state = 527
                        self.testlist_star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 534
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnassignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def ASSIGN(self):
            return self.getToken(Python3Parser.ASSIGN, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_annassign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnassign" ):
                listener.enterAnnassign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnassign" ):
                listener.exitAnnassign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnassign" ):
                return visitor.visitAnnassign(self)
            else:
                return visitor.visitChildren(self)




    def annassign(self):

        localctx = Python3Parser.AnnassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_annassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            self.match(Python3Parser.COLON)
            self.state = 538
            self.test()
            self.state = 541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ASSIGN:
                self.state = 539
                self.match(Python3Parser.ASSIGN)
                self.state = 540
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Testlist_star_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_testlist_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_star_expr" ):
                listener.enterTestlist_star_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_star_expr" ):
                listener.exitTestlist_star_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_star_expr" ):
                return visitor.visitTestlist_star_expr(self)
            else:
                return visitor.visitChildren(self)




    def testlist_star_expr(self):

        localctx = Python3Parser.Testlist_star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_testlist_star_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.state = 543
                self.test()
                pass
            elif token in [Python3Parser.STAR]:
                self.state = 544
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 554
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 547
                    self.match(Python3Parser.COMMA)
                    self.state = 550
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                        self.state = 548
                        self.test()
                        pass
                    elif token in [Python3Parser.STAR]:
                        self.state = 549
                        self.star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 556
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

            self.state = 558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 557
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AugassignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_ASSIGN(self):
            return self.getToken(Python3Parser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(Python3Parser.SUB_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(Python3Parser.MULT_ASSIGN, 0)

        def AT_ASSIGN(self):
            return self.getToken(Python3Parser.AT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(Python3Parser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(Python3Parser.MOD_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(Python3Parser.AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(Python3Parser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(Python3Parser.XOR_ASSIGN, 0)

        def LEFT_SHIFT_ASSIGN(self):
            return self.getToken(Python3Parser.LEFT_SHIFT_ASSIGN, 0)

        def RIGHT_SHIFT_ASSIGN(self):
            return self.getToken(Python3Parser.RIGHT_SHIFT_ASSIGN, 0)

        def POWER_ASSIGN(self):
            return self.getToken(Python3Parser.POWER_ASSIGN, 0)

        def IDIV_ASSIGN(self):
            return self.getToken(Python3Parser.IDIV_ASSIGN, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_augassign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAugassign" ):
                listener.enterAugassign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAugassign" ):
                listener.exitAugassign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAugassign" ):
                return visitor.visitAugassign(self)
            else:
                return visitor.visitChildren(self)




    def augassign(self):

        localctx = Python3Parser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_augassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 560
            _la = self._input.LA(1)
            if not(((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (Python3Parser.ADD_ASSIGN - 88)) | (1 << (Python3Parser.SUB_ASSIGN - 88)) | (1 << (Python3Parser.MULT_ASSIGN - 88)) | (1 << (Python3Parser.AT_ASSIGN - 88)) | (1 << (Python3Parser.DIV_ASSIGN - 88)) | (1 << (Python3Parser.MOD_ASSIGN - 88)) | (1 << (Python3Parser.AND_ASSIGN - 88)) | (1 << (Python3Parser.OR_ASSIGN - 88)) | (1 << (Python3Parser.XOR_ASSIGN - 88)) | (1 << (Python3Parser.LEFT_SHIFT_ASSIGN - 88)) | (1 << (Python3Parser.RIGHT_SHIFT_ASSIGN - 88)) | (1 << (Python3Parser.POWER_ASSIGN - 88)) | (1 << (Python3Parser.IDIV_ASSIGN - 88)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Del_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEL(self):
            return self.getToken(Python3Parser.DEL, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_del_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDel_stmt" ):
                listener.enterDel_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDel_stmt" ):
                listener.exitDel_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDel_stmt" ):
                return visitor.visitDel_stmt(self)
            else:
                return visitor.visitChildren(self)




    def del_stmt(self):

        localctx = Python3Parser.Del_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_del_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            self.match(Python3Parser.DEL)
            self.state = 563
            self.exprlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pass_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASS(self):
            return self.getToken(Python3Parser.PASS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_pass_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPass_stmt" ):
                listener.enterPass_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPass_stmt" ):
                listener.exitPass_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPass_stmt" ):
                return visitor.visitPass_stmt(self)
            else:
                return visitor.visitChildren(self)




    def pass_stmt(self):

        localctx = Python3Parser.Pass_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_pass_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            self.match(Python3Parser.PASS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Flow_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def break_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Break_stmtContext,0)


        def continue_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Continue_stmtContext,0)


        def return_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Return_stmtContext,0)


        def raise_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Raise_stmtContext,0)


        def yield_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Yield_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_flow_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlow_stmt" ):
                listener.enterFlow_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlow_stmt" ):
                listener.exitFlow_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlow_stmt" ):
                return visitor.visitFlow_stmt(self)
            else:
                return visitor.visitChildren(self)




    def flow_stmt(self):

        localctx = Python3Parser.Flow_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_flow_stmt)
        try:
            self.state = 572
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.BREAK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 567
                self.break_stmt()
                pass
            elif token in [Python3Parser.CONTINUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 568
                self.continue_stmt()
                pass
            elif token in [Python3Parser.RETURN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 569
                self.return_stmt()
                pass
            elif token in [Python3Parser.RAISE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 570
                self.raise_stmt()
                pass
            elif token in [Python3Parser.YIELD]:
                self.enterOuterAlt(localctx, 5)
                self.state = 571
                self.yield_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Break_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(Python3Parser.BREAK, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_break_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_stmt" ):
                listener.enterBreak_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_stmt" ):
                listener.exitBreak_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_stmt" ):
                return visitor.visitBreak_stmt(self)
            else:
                return visitor.visitChildren(self)




    def break_stmt(self):

        localctx = Python3Parser.Break_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_break_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.match(Python3Parser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Continue_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(Python3Parser.CONTINUE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_continue_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_stmt" ):
                listener.enterContinue_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_stmt" ):
                listener.exitContinue_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_stmt" ):
                return visitor.visitContinue_stmt(self)
            else:
                return visitor.visitChildren(self)




    def continue_stmt(self):

        localctx = Python3Parser.Continue_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_continue_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self.match(Python3Parser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(Python3Parser.RETURN, 0)

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_return_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_stmt" ):
                listener.enterReturn_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_stmt" ):
                listener.exitReturn_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_stmt" ):
                return visitor.visitReturn_stmt(self)
            else:
                return visitor.visitChildren(self)




    def return_stmt(self):

        localctx = Python3Parser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_return_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self.match(Python3Parser.RETURN)
            self.state = 580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.ADD - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.NOT_OP - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)))) != 0):
                self.state = 579
                self.testlist()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(Python3Parser.Yield_exprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_yield_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_stmt" ):
                listener.enterYield_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_stmt" ):
                listener.exitYield_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_stmt" ):
                return visitor.visitYield_stmt(self)
            else:
                return visitor.visitChildren(self)




    def yield_stmt(self):

        localctx = Python3Parser.Yield_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_yield_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582
            self.yield_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Raise_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(Python3Parser.RAISE, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_raise_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_stmt" ):
                listener.enterRaise_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_stmt" ):
                listener.exitRaise_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaise_stmt" ):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)




    def raise_stmt(self):

        localctx = Python3Parser.Raise_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_raise_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self.match(Python3Parser.RAISE)
            self.state = 590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.ADD - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.NOT_OP - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)))) != 0):
                self.state = 585
                self.test()
                self.state = 588
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.FROM:
                    self.state = 586
                    self.match(Python3Parser.FROM)
                    self.state = 587
                    self.test()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_name(self):
            return self.getTypedRuleContext(Python3Parser.Import_nameContext,0)


        def import_from(self):
            return self.getTypedRuleContext(Python3Parser.Import_fromContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_import_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_stmt" ):
                listener.enterImport_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_stmt" ):
                listener.exitImport_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_stmt" ):
                return visitor.visitImport_stmt(self)
            else:
                return visitor.visitChildren(self)




    def import_stmt(self):

        localctx = Python3Parser.Import_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_import_stmt)
        try:
            self.state = 594
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.IMPORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 592
                self.import_name()
                pass
            elif token in [Python3Parser.FROM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 593
                self.import_from()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(Python3Parser.IMPORT, 0)

        def dotted_as_names(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_as_namesContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_import_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_name" ):
                listener.enterImport_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_name" ):
                listener.exitImport_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_name" ):
                return visitor.visitImport_name(self)
            else:
                return visitor.visitChildren(self)




    def import_name(self):

        localctx = Python3Parser.Import_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_import_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self.match(Python3Parser.IMPORT)
            self.state = 597
            self.dotted_as_names()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_fromContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def IMPORT(self):
            return self.getToken(Python3Parser.IMPORT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_nameContext,0)


        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def import_as_names(self):
            return self.getTypedRuleContext(Python3Parser.Import_as_namesContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.DOT)
            else:
                return self.getToken(Python3Parser.DOT, i)

        def ELLIPSIS(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ELLIPSIS)
            else:
                return self.getToken(Python3Parser.ELLIPSIS, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_import_from

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_from" ):
                listener.enterImport_from(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_from" ):
                listener.exitImport_from(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_from" ):
                return visitor.visitImport_from(self)
            else:
                return visitor.visitChildren(self)




    def import_from(self):

        localctx = Python3Parser.Import_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_import_from)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 599
            self.match(Python3Parser.FROM)
            self.state = 612
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==Python3Parser.DOT or _la==Python3Parser.ELLIPSIS:
                    self.state = 600
                    _la = self._input.LA(1)
                    if not(_la==Python3Parser.DOT or _la==Python3Parser.ELLIPSIS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 605
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 606
                self.dotted_name()
                pass

            elif la_ == 2:
                self.state = 608 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 607
                    _la = self._input.LA(1)
                    if not(_la==Python3Parser.DOT or _la==Python3Parser.ELLIPSIS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 610 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==Python3Parser.DOT or _la==Python3Parser.ELLIPSIS):
                        break

                pass


            self.state = 614
            self.match(Python3Parser.IMPORT)
            self.state = 621
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STAR]:
                self.state = 615
                self.match(Python3Parser.STAR)
                pass
            elif token in [Python3Parser.OPEN_PAREN]:
                self.state = 616
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 617
                self.import_as_names()
                self.state = 618
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [Python3Parser.MATCH, Python3Parser.UNDERSCORE, Python3Parser.NAME]:
                self.state = 620
                self.import_as_names()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_as_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.NameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.NameContext,i)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_import_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_name" ):
                listener.enterImport_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_name" ):
                listener.exitImport_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_name" ):
                return visitor.visitImport_as_name(self)
            else:
                return visitor.visitChildren(self)




    def import_as_name(self):

        localctx = Python3Parser.Import_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_import_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self.name()
            self.state = 626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.AS:
                self.state = 624
                self.match(Python3Parser.AS)
                self.state = 625
                self.name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_as_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_nameContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_dotted_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_name" ):
                listener.enterDotted_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_name" ):
                listener.exitDotted_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_name" ):
                return visitor.visitDotted_as_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_name(self):

        localctx = Python3Parser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_dotted_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self.dotted_name()
            self.state = 631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.AS:
                self.state = 629
                self.match(Python3Parser.AS)
                self.state = 630
                self.name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_as_namesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Import_as_nameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Import_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_import_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_names" ):
                listener.enterImport_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_names" ):
                listener.exitImport_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_names" ):
                return visitor.visitImport_as_names(self)
            else:
                return visitor.visitChildren(self)




    def import_as_names(self):

        localctx = Python3Parser.Import_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_import_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 633
            self.import_as_name()
            self.state = 638
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 634
                    self.match(Python3Parser.COMMA)
                    self.state = 635
                    self.import_as_name() 
                self.state = 640
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

            self.state = 642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 641
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_as_namesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Dotted_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_dotted_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_names" ):
                listener.enterDotted_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_names" ):
                listener.exitDotted_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_names" ):
                return visitor.visitDotted_as_names(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_names(self):

        localctx = Python3Parser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_dotted_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self.dotted_as_name()
            self.state = 649
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.COMMA:
                self.state = 645
                self.match(Python3Parser.COMMA)
                self.state = 646
                self.dotted_as_name()
                self.state = 651
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.NameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.NameContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.DOT)
            else:
                return self.getToken(Python3Parser.DOT, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_dotted_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_name" ):
                listener.enterDotted_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_name" ):
                listener.exitDotted_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_name" ):
                return visitor.visitDotted_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_name(self):

        localctx = Python3Parser.Dotted_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_dotted_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self.name()
            self.state = 657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.DOT:
                self.state = 653
                self.match(Python3Parser.DOT)
                self.state = 654
                self.name()
                self.state = 659
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(Python3Parser.GLOBAL, 0)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.NameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.NameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_global_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_stmt" ):
                listener.enterGlobal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_stmt" ):
                listener.exitGlobal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobal_stmt" ):
                return visitor.visitGlobal_stmt(self)
            else:
                return visitor.visitChildren(self)




    def global_stmt(self):

        localctx = Python3Parser.Global_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_global_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 660
            self.match(Python3Parser.GLOBAL)
            self.state = 661
            self.name()
            self.state = 666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.COMMA:
                self.state = 662
                self.match(Python3Parser.COMMA)
                self.state = 663
                self.name()
                self.state = 668
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Nonlocal_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONLOCAL(self):
            return self.getToken(Python3Parser.NONLOCAL, 0)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.NameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.NameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_nonlocal_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonlocal_stmt" ):
                listener.enterNonlocal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonlocal_stmt" ):
                listener.exitNonlocal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonlocal_stmt" ):
                return visitor.visitNonlocal_stmt(self)
            else:
                return visitor.visitChildren(self)




    def nonlocal_stmt(self):

        localctx = Python3Parser.Nonlocal_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_nonlocal_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self.match(Python3Parser.NONLOCAL)
            self.state = 670
            self.name()
            self.state = 675
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.COMMA:
                self.state = 671
                self.match(Python3Parser.COMMA)
                self.state = 672
                self.name()
                self.state = 677
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assert_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(Python3Parser.ASSERT, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self):
            return self.getToken(Python3Parser.COMMA, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_assert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssert_stmt" ):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssert_stmt" ):
                listener.exitAssert_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssert_stmt" ):
                return visitor.visitAssert_stmt(self)
            else:
                return visitor.visitChildren(self)




    def assert_stmt(self):

        localctx = Python3Parser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_assert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678
            self.match(Python3Parser.ASSERT)
            self.state = 679
            self.test()
            self.state = 682
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 680
                self.match(Python3Parser.COMMA)
                self.state = 681
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_stmt(self):
            return self.getTypedRuleContext(Python3Parser.If_stmtContext,0)


        def while_stmt(self):
            return self.getTypedRuleContext(Python3Parser.While_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(Python3Parser.For_stmtContext,0)


        def try_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Try_stmtContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(Python3Parser.With_stmtContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def classdef(self):
            return self.getTypedRuleContext(Python3Parser.ClassdefContext,0)


        def decorated(self):
            return self.getTypedRuleContext(Python3Parser.DecoratedContext,0)


        def async_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Async_stmtContext,0)


        def match_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Match_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_compound_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_stmt" ):
                listener.enterCompound_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_stmt" ):
                listener.exitCompound_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_stmt" ):
                return visitor.visitCompound_stmt(self)
            else:
                return visitor.visitChildren(self)




    def compound_stmt(self):

        localctx = Python3Parser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_compound_stmt)
        try:
            self.state = 694
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 684
                self.if_stmt()
                pass
            elif token in [Python3Parser.WHILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 685
                self.while_stmt()
                pass
            elif token in [Python3Parser.FOR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 686
                self.for_stmt()
                pass
            elif token in [Python3Parser.TRY]:
                self.enterOuterAlt(localctx, 4)
                self.state = 687
                self.try_stmt()
                pass
            elif token in [Python3Parser.WITH]:
                self.enterOuterAlt(localctx, 5)
                self.state = 688
                self.with_stmt()
                pass
            elif token in [Python3Parser.DEF]:
                self.enterOuterAlt(localctx, 6)
                self.state = 689
                self.funcdef()
                pass
            elif token in [Python3Parser.CLASS]:
                self.enterOuterAlt(localctx, 7)
                self.state = 690
                self.classdef()
                pass
            elif token in [Python3Parser.AT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 691
                self.decorated()
                pass
            elif token in [Python3Parser.ASYNC]:
                self.enterOuterAlt(localctx, 9)
                self.state = 692
                self.async_stmt()
                pass
            elif token in [Python3Parser.MATCH]:
                self.enterOuterAlt(localctx, 10)
                self.state = 693
                self.match_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Async_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(Python3Parser.ASYNC, 0)

        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(Python3Parser.With_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(Python3Parser.For_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_async_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsync_stmt" ):
                listener.enterAsync_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsync_stmt" ):
                listener.exitAsync_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsync_stmt" ):
                return visitor.visitAsync_stmt(self)
            else:
                return visitor.visitChildren(self)




    def async_stmt(self):

        localctx = Python3Parser.Async_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_async_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 696
            self.match(Python3Parser.ASYNC)
            self.state = 700
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.DEF]:
                self.state = 697
                self.funcdef()
                pass
            elif token in [Python3Parser.WITH]:
                self.state = 698
                self.with_stmt()
                pass
            elif token in [Python3Parser.FOR]:
                self.state = 699
                self.for_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.BlockContext)
            else:
                return self.getTypedRuleContext(Python3Parser.BlockContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ELIF)
            else:
                return self.getToken(Python3Parser.ELIF, i)

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_if_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stmt" ):
                listener.enterIf_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stmt" ):
                listener.exitIf_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_stmt" ):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)




    def if_stmt(self):

        localctx = Python3Parser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_if_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self.match(Python3Parser.IF)
            self.state = 703
            self.test()
            self.state = 704
            self.match(Python3Parser.COLON)
            self.state = 705
            self.block()
            self.state = 713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.ELIF:
                self.state = 706
                self.match(Python3Parser.ELIF)
                self.state = 707
                self.test()
                self.state = 708
                self.match(Python3Parser.COLON)
                self.state = 709
                self.block()
                self.state = 715
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 719
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ELSE:
                self.state = 716
                self.match(Python3Parser.ELSE)
                self.state = 717
                self.match(Python3Parser.COLON)
                self.state = 718
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(Python3Parser.WHILE, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.BlockContext)
            else:
                return self.getTypedRuleContext(Python3Parser.BlockContext,i)


        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_while_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_stmt" ):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_stmt" ):
                listener.exitWhile_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_stmt" ):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)




    def while_stmt(self):

        localctx = Python3Parser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_while_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 721
            self.match(Python3Parser.WHILE)
            self.state = 722
            self.test()
            self.state = 723
            self.match(Python3Parser.COLON)
            self.state = 724
            self.block()
            self.state = 728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ELSE:
                self.state = 725
                self.match(Python3Parser.ELSE)
                self.state = 726
                self.match(Python3Parser.COLON)
                self.state = 727
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Python3Parser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext,0)


        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.BlockContext)
            else:
                return self.getTypedRuleContext(Python3Parser.BlockContext,i)


        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_for_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_stmt" ):
                listener.enterFor_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_stmt" ):
                listener.exitFor_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_stmt" ):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)




    def for_stmt(self):

        localctx = Python3Parser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_for_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            self.match(Python3Parser.FOR)
            self.state = 731
            self.exprlist()
            self.state = 732
            self.match(Python3Parser.IN)
            self.state = 733
            self.testlist()
            self.state = 734
            self.match(Python3Parser.COLON)
            self.state = 735
            self.block()
            self.state = 739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ELSE:
                self.state = 736
                self.match(Python3Parser.ELSE)
                self.state = 737
                self.match(Python3Parser.COLON)
                self.state = 738
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(Python3Parser.TRY, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.BlockContext)
            else:
                return self.getTypedRuleContext(Python3Parser.BlockContext,i)


        def FINALLY(self):
            return self.getToken(Python3Parser.FINALLY, 0)

        def except_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Except_clauseContext,i)


        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_try_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_stmt" ):
                listener.enterTry_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_stmt" ):
                listener.exitTry_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTry_stmt" ):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)




    def try_stmt(self):

        localctx = Python3Parser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_try_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            self.match(Python3Parser.TRY)
            self.state = 742
            self.match(Python3Parser.COLON)
            self.state = 743
            self.block()
            self.state = 765
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.EXCEPT]:
                self.state = 748 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 744
                    self.except_clause()
                    self.state = 745
                    self.match(Python3Parser.COLON)
                    self.state = 746
                    self.block()
                    self.state = 750 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==Python3Parser.EXCEPT):
                        break

                self.state = 755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.ELSE:
                    self.state = 752
                    self.match(Python3Parser.ELSE)
                    self.state = 753
                    self.match(Python3Parser.COLON)
                    self.state = 754
                    self.block()


                self.state = 760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.FINALLY:
                    self.state = 757
                    self.match(Python3Parser.FINALLY)
                    self.state = 758
                    self.match(Python3Parser.COLON)
                    self.state = 759
                    self.block()


                pass
            elif token in [Python3Parser.FINALLY]:
                self.state = 762
                self.match(Python3Parser.FINALLY)
                self.state = 763
                self.match(Python3Parser.COLON)
                self.state = 764
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(Python3Parser.WITH, 0)

        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.With_itemContext)
            else:
                return self.getTypedRuleContext(Python3Parser.With_itemContext,i)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(Python3Parser.BlockContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_with_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_stmt" ):
                listener.enterWith_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_stmt" ):
                listener.exitWith_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_stmt" ):
                return visitor.visitWith_stmt(self)
            else:
                return visitor.visitChildren(self)




    def with_stmt(self):

        localctx = Python3Parser.With_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_with_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self.match(Python3Parser.WITH)
            self.state = 768
            self.with_item()
            self.state = 773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.COMMA:
                self.state = 769
                self.match(Python3Parser.COMMA)
                self.state = 770
                self.with_item()
                self.state = 775
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 776
            self.match(Python3Parser.COLON)
            self.state = 777
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(Python3Parser.ExprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_with_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_item" ):
                listener.enterWith_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_item" ):
                listener.exitWith_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_item" ):
                return visitor.visitWith_item(self)
            else:
                return visitor.visitChildren(self)




    def with_item(self):

        localctx = Python3Parser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.test()
            self.state = 782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.AS:
                self.state = 780
                self.match(Python3Parser.AS)
                self.state = 781
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Except_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(Python3Parser.EXCEPT, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_except_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_clause" ):
                listener.enterExcept_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_clause" ):
                listener.exitExcept_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_clause" ):
                return visitor.visitExcept_clause(self)
            else:
                return visitor.visitChildren(self)




    def except_clause(self):

        localctx = Python3Parser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_except_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784
            self.match(Python3Parser.EXCEPT)
            self.state = 790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.ADD - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.NOT_OP - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)))) != 0):
                self.state = 785
                self.test()
                self.state = 788
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.AS:
                    self.state = 786
                    self.match(Python3Parser.AS)
                    self.state = 787
                    self.name()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmts(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtsContext,0)


        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(Python3Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(Python3Parser.DEDENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = Python3Parser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.state = 802
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.ASSERT, Python3Parser.AWAIT, Python3Parser.BREAK, Python3Parser.CONTINUE, Python3Parser.DEL, Python3Parser.FALSE, Python3Parser.FROM, Python3Parser.GLOBAL, Python3Parser.IMPORT, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NONLOCAL, Python3Parser.NOT, Python3Parser.PASS, Python3Parser.RAISE, Python3Parser.RETURN, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.YIELD, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 792
                self.simple_stmts()
                pass
            elif token in [Python3Parser.NEWLINE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 793
                self.match(Python3Parser.NEWLINE)
                self.state = 794
                self.match(Python3Parser.INDENT)
                self.state = 796 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 795
                    self.stmt()
                    self.state = 798 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.ASSERT) | (1 << Python3Parser.ASYNC) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.BREAK) | (1 << Python3Parser.CLASS) | (1 << Python3Parser.CONTINUE) | (1 << Python3Parser.DEF) | (1 << Python3Parser.DEL) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.FOR) | (1 << Python3Parser.FROM) | (1 << Python3Parser.GLOBAL) | (1 << Python3Parser.IF) | (1 << Python3Parser.IMPORT) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NONLOCAL) | (1 << Python3Parser.NOT) | (1 << Python3Parser.PASS) | (1 << Python3Parser.RAISE) | (1 << Python3Parser.RETURN) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.TRY) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.WHILE) | (1 << Python3Parser.WITH) | (1 << Python3Parser.YIELD) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.ADD - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.NOT_OP - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)) | (1 << (Python3Parser.AT - 64)))) != 0)):
                        break

                self.state = 800
                self.match(Python3Parser.DEDENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Match_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(Python3Parser.MATCH, 0)

        def subject_expr(self):
            return self.getTypedRuleContext(Python3Parser.Subject_exprContext,0)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(Python3Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(Python3Parser.DEDENT, 0)

        def case_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Case_blockContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Case_blockContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_match_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatch_stmt" ):
                listener.enterMatch_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatch_stmt" ):
                listener.exitMatch_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatch_stmt" ):
                return visitor.visitMatch_stmt(self)
            else:
                return visitor.visitChildren(self)




    def match_stmt(self):

        localctx = Python3Parser.Match_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_match_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            self.match(Python3Parser.MATCH)
            self.state = 805
            self.subject_expr()
            self.state = 806
            self.match(Python3Parser.COLON)
            self.state = 807
            self.match(Python3Parser.NEWLINE)
            self.state = 808
            self.match(Python3Parser.INDENT)
            self.state = 810 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 809
                self.case_block()
                self.state = 812 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==Python3Parser.CASE):
                    break

            self.state = 814
            self.match(Python3Parser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subject_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_named_expression(self):
            return self.getTypedRuleContext(Python3Parser.Star_named_expressionContext,0)


        def COMMA(self):
            return self.getToken(Python3Parser.COMMA, 0)

        def star_named_expressions(self):
            return self.getTypedRuleContext(Python3Parser.Star_named_expressionsContext,0)


        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_subject_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubject_expr" ):
                listener.enterSubject_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubject_expr" ):
                listener.exitSubject_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubject_expr" ):
                return visitor.visitSubject_expr(self)
            else:
                return visitor.visitChildren(self)




    def subject_expr(self):

        localctx = Python3Parser.Subject_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_subject_expr)
        self._la = 0 # Token type
        try:
            self.state = 822
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 816
                self.star_named_expression()
                self.state = 817
                self.match(Python3Parser.COMMA)
                self.state = 819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 818
                    self.star_named_expressions()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 821
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_named_expressionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def star_named_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_named_expressionContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_named_expressionContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_star_named_expressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_named_expressions" ):
                listener.enterStar_named_expressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_named_expressions" ):
                listener.exitStar_named_expressions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_named_expressions" ):
                return visitor.visitStar_named_expressions(self)
            else:
                return visitor.visitChildren(self)




    def star_named_expressions(self):

        localctx = Python3Parser.Star_named_expressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_star_named_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.match(Python3Parser.COMMA)
            self.state = 826 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 825
                self.star_named_expression()
                self.state = 828 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.ADD - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.NOT_OP - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)))) != 0)):
                    break

            self.state = 831
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 830
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_named_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(Python3Parser.ExprContext,0)


        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_star_named_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_named_expression" ):
                listener.enterStar_named_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_named_expression" ):
                listener.exitStar_named_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_named_expression" ):
                return visitor.visitStar_named_expression(self)
            else:
                return visitor.visitChildren(self)




    def star_named_expression(self):

        localctx = Python3Parser.Star_named_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_star_named_expression)
        try:
            self.state = 836
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 833
                self.match(Python3Parser.STAR)
                self.state = 834
                self.expr()
                pass
            elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 835
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Case_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(Python3Parser.CASE, 0)

        def patterns(self):
            return self.getTypedRuleContext(Python3Parser.PatternsContext,0)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(Python3Parser.BlockContext,0)


        def guard(self):
            return self.getTypedRuleContext(Python3Parser.GuardContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_case_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_block" ):
                listener.enterCase_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_block" ):
                listener.exitCase_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_block" ):
                return visitor.visitCase_block(self)
            else:
                return visitor.visitChildren(self)




    def case_block(self):

        localctx = Python3Parser.Case_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_case_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self.match(Python3Parser.CASE)
            self.state = 839
            self.patterns()
            self.state = 841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.IF:
                self.state = 840
                self.guard()


            self.state = 843
            self.match(Python3Parser.COLON)
            self.state = 844
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GuardContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_guard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGuard" ):
                listener.enterGuard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGuard" ):
                listener.exitGuard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGuard" ):
                return visitor.visitGuard(self)
            else:
                return visitor.visitChildren(self)




    def guard(self):

        localctx = Python3Parser.GuardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_guard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846
            self.match(Python3Parser.IF)
            self.state = 847
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PatternsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def open_sequence_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Open_sequence_patternContext,0)


        def pattern(self):
            return self.getTypedRuleContext(Python3Parser.PatternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_patterns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatterns" ):
                listener.enterPatterns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatterns" ):
                listener.exitPatterns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatterns" ):
                return visitor.visitPatterns(self)
            else:
                return visitor.visitChildren(self)




    def patterns(self):

        localctx = Python3Parser.PatternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_patterns)
        try:
            self.state = 851
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 849
                self.open_sequence_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 850
                self.pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def as_pattern(self):
            return self.getTypedRuleContext(Python3Parser.As_patternContext,0)


        def or_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Or_patternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern" ):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)




    def pattern(self):

        localctx = Python3Parser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_pattern)
        try:
            self.state = 855
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 853
                self.as_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 854
                self.or_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class As_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Or_patternContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(Python3Parser.Pattern_capture_targetContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_as_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs_pattern" ):
                listener.enterAs_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs_pattern" ):
                listener.exitAs_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAs_pattern" ):
                return visitor.visitAs_pattern(self)
            else:
                return visitor.visitChildren(self)




    def as_pattern(self):

        localctx = Python3Parser.As_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_as_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self.or_pattern()
            self.state = 858
            self.match(Python3Parser.AS)
            self.state = 859
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Or_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def closed_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Closed_patternContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Closed_patternContext,i)


        def OR_OP(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.OR_OP)
            else:
                return self.getToken(Python3Parser.OR_OP, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_or_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_pattern" ):
                listener.enterOr_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_pattern" ):
                listener.exitOr_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_pattern" ):
                return visitor.visitOr_pattern(self)
            else:
                return visitor.visitChildren(self)




    def or_pattern(self):

        localctx = Python3Parser.Or_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_or_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 861
            self.closed_pattern()
            self.state = 866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.OR_OP:
                self.state = 862
                self.match(Python3Parser.OR_OP)
                self.state = 863
                self.closed_pattern()
                self.state = 868
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Closed_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Literal_patternContext,0)


        def capture_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Capture_patternContext,0)


        def wildcard_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Wildcard_patternContext,0)


        def value_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Value_patternContext,0)


        def group_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Group_patternContext,0)


        def sequence_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Sequence_patternContext,0)


        def mapping_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Mapping_patternContext,0)


        def class_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Class_patternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_closed_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosed_pattern" ):
                listener.enterClosed_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosed_pattern" ):
                listener.exitClosed_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClosed_pattern" ):
                return visitor.visitClosed_pattern(self)
            else:
                return visitor.visitChildren(self)




    def closed_pattern(self):

        localctx = Python3Parser.Closed_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_closed_pattern)
        try:
            self.state = 877
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 869
                self.literal_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 870
                self.capture_pattern()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 871
                self.wildcard_pattern()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 872
                self.value_pattern()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 873
                self.group_pattern()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 874
                self.sequence_pattern()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 875
                self.mapping_pattern()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 876
                self.class_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(Python3Parser.Signed_numberContext,0)


        def complex_number(self):
            return self.getTypedRuleContext(Python3Parser.Complex_numberContext,0)


        def strings(self):
            return self.getTypedRuleContext(Python3Parser.StringsContext,0)


        def NONE(self):
            return self.getToken(Python3Parser.NONE, 0)

        def TRUE(self):
            return self.getToken(Python3Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(Python3Parser.FALSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_literal_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_pattern" ):
                listener.enterLiteral_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_pattern" ):
                listener.exitLiteral_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral_pattern" ):
                return visitor.visitLiteral_pattern(self)
            else:
                return visitor.visitChildren(self)




    def literal_pattern(self):

        localctx = Python3Parser.Literal_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_literal_pattern)
        try:
            self.state = 887
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 879
                self.signed_number()
                self.state = 880
                if not  self.CannotBePlusMinus() :
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, " self.CannotBePlusMinus() ")
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 882
                self.complex_number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 883
                self.strings()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 884
                self.match(Python3Parser.NONE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 885
                self.match(Python3Parser.TRUE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 886
                self.match(Python3Parser.FALSE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(Python3Parser.Signed_numberContext,0)


        def complex_number(self):
            return self.getTypedRuleContext(Python3Parser.Complex_numberContext,0)


        def strings(self):
            return self.getTypedRuleContext(Python3Parser.StringsContext,0)


        def NONE(self):
            return self.getToken(Python3Parser.NONE, 0)

        def TRUE(self):
            return self.getToken(Python3Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(Python3Parser.FALSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_literal_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_expr" ):
                listener.enterLiteral_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_expr" ):
                listener.exitLiteral_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral_expr" ):
                return visitor.visitLiteral_expr(self)
            else:
                return visitor.visitChildren(self)




    def literal_expr(self):

        localctx = Python3Parser.Literal_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_literal_expr)
        try:
            self.state = 897
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 889
                self.signed_number()
                self.state = 890
                if not  self.CannotBePlusMinus() :
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, " self.CannotBePlusMinus() ")
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 892
                self.complex_number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 893
                self.strings()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 894
                self.match(Python3Parser.NONE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 895
                self.match(Python3Parser.TRUE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 896
                self.match(Python3Parser.FALSE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Complex_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_real_number(self):
            return self.getTypedRuleContext(Python3Parser.Signed_real_numberContext,0)


        def ADD(self):
            return self.getToken(Python3Parser.ADD, 0)

        def imaginary_number(self):
            return self.getTypedRuleContext(Python3Parser.Imaginary_numberContext,0)


        def MINUS(self):
            return self.getToken(Python3Parser.MINUS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_complex_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplex_number" ):
                listener.enterComplex_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplex_number" ):
                listener.exitComplex_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplex_number" ):
                return visitor.visitComplex_number(self)
            else:
                return visitor.visitChildren(self)




    def complex_number(self):

        localctx = Python3Parser.Complex_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_complex_number)
        try:
            self.state = 907
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 899
                self.signed_real_number()
                self.state = 900
                self.match(Python3Parser.ADD)
                self.state = 901
                self.imaginary_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 903
                self.signed_real_number()
                self.state = 904
                self.match(Python3Parser.MINUS)
                self.state = 905
                self.imaginary_number()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Signed_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(Python3Parser.NUMBER, 0)

        def MINUS(self):
            return self.getToken(Python3Parser.MINUS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_signed_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_number" ):
                listener.enterSigned_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_number" ):
                listener.exitSigned_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSigned_number" ):
                return visitor.visitSigned_number(self)
            else:
                return visitor.visitChildren(self)




    def signed_number(self):

        localctx = Python3Parser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_signed_number)
        try:
            self.state = 912
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NUMBER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 909
                self.match(Python3Parser.NUMBER)
                pass
            elif token in [Python3Parser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 910
                self.match(Python3Parser.MINUS)
                self.state = 911
                self.match(Python3Parser.NUMBER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Signed_real_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def real_number(self):
            return self.getTypedRuleContext(Python3Parser.Real_numberContext,0)


        def MINUS(self):
            return self.getToken(Python3Parser.MINUS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_signed_real_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_real_number" ):
                listener.enterSigned_real_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_real_number" ):
                listener.exitSigned_real_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSigned_real_number" ):
                return visitor.visitSigned_real_number(self)
            else:
                return visitor.visitChildren(self)




    def signed_real_number(self):

        localctx = Python3Parser.Signed_real_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_signed_real_number)
        try:
            self.state = 917
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NUMBER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 914
                self.real_number()
                pass
            elif token in [Python3Parser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 915
                self.match(Python3Parser.MINUS)
                self.state = 916
                self.real_number()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Real_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(Python3Parser.NUMBER, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_real_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReal_number" ):
                listener.enterReal_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReal_number" ):
                listener.exitReal_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReal_number" ):
                return visitor.visitReal_number(self)
            else:
                return visitor.visitChildren(self)




    def real_number(self):

        localctx = Python3Parser.Real_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_real_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919
            self.match(Python3Parser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Imaginary_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(Python3Parser.NUMBER, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_imaginary_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImaginary_number" ):
                listener.enterImaginary_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImaginary_number" ):
                listener.exitImaginary_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImaginary_number" ):
                return visitor.visitImaginary_number(self)
            else:
                return visitor.visitChildren(self)




    def imaginary_number(self):

        localctx = Python3Parser.Imaginary_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_imaginary_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            self.match(Python3Parser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Capture_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern_capture_target(self):
            return self.getTypedRuleContext(Python3Parser.Pattern_capture_targetContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_capture_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapture_pattern" ):
                listener.enterCapture_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapture_pattern" ):
                listener.exitCapture_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapture_pattern" ):
                return visitor.visitCapture_pattern(self)
            else:
                return visitor.visitChildren(self)




    def capture_pattern(self):

        localctx = Python3Parser.Capture_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_capture_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 923
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pattern_capture_targetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_pattern_capture_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern_capture_target" ):
                listener.enterPattern_capture_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern_capture_target" ):
                listener.exitPattern_capture_target(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern_capture_target" ):
                return visitor.visitPattern_capture_target(self)
            else:
                return visitor.visitChildren(self)




    def pattern_capture_target(self):

        localctx = Python3Parser.Pattern_capture_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_pattern_capture_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 925
            self.name()
            self.state = 926
            if not  self.CannotBeDotLpEq() :
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, " self.CannotBeDotLpEq() ")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Wildcard_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(Python3Parser.UNDERSCORE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_wildcard_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcard_pattern" ):
                listener.enterWildcard_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcard_pattern" ):
                listener.exitWildcard_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildcard_pattern" ):
                return visitor.visitWildcard_pattern(self)
            else:
                return visitor.visitChildren(self)




    def wildcard_pattern(self):

        localctx = Python3Parser.Wildcard_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_wildcard_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 928
            self.match(Python3Parser.UNDERSCORE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Value_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attr(self):
            return self.getTypedRuleContext(Python3Parser.AttrContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_value_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_pattern" ):
                listener.enterValue_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_pattern" ):
                listener.exitValue_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValue_pattern" ):
                return visitor.visitValue_pattern(self)
            else:
                return visitor.visitChildren(self)




    def value_pattern(self):

        localctx = Python3Parser.Value_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_value_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 930
            self.attr()
            self.state = 931
            if not  self.CannotBeDotLpEq() :
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, " self.CannotBeDotLpEq() ")
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.NameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.NameContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.DOT)
            else:
                return self.getToken(Python3Parser.DOT, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr" ):
                listener.enterAttr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr" ):
                listener.exitAttr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttr" ):
                return visitor.visitAttr(self)
            else:
                return visitor.visitChildren(self)




    def attr(self):

        localctx = Python3Parser.AttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_attr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 933
            self.name()
            self.state = 936 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 934
                    self.match(Python3Parser.DOT)
                    self.state = 935
                    self.name()

                else:
                    raise NoViableAltException(self)
                self.state = 938 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Name_or_attrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attr(self):
            return self.getTypedRuleContext(Python3Parser.AttrContext,0)


        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_name_or_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName_or_attr" ):
                listener.enterName_or_attr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName_or_attr" ):
                listener.exitName_or_attr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName_or_attr" ):
                return visitor.visitName_or_attr(self)
            else:
                return visitor.visitChildren(self)




    def name_or_attr(self):

        localctx = Python3Parser.Name_or_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_name_or_attr)
        try:
            self.state = 942
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 940
                self.attr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 941
                self.name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def pattern(self):
            return self.getTypedRuleContext(Python3Parser.PatternContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_group_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_pattern" ):
                listener.enterGroup_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_pattern" ):
                listener.exitGroup_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_pattern" ):
                return visitor.visitGroup_pattern(self)
            else:
                return visitor.visitChildren(self)




    def group_pattern(self):

        localctx = Python3Parser.Group_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_group_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self.match(Python3Parser.OPEN_PAREN)
            self.state = 945
            self.pattern()
            self.state = 946
            self.match(Python3Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sequence_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(Python3Parser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(Python3Parser.CLOSE_BRACK, 0)

        def maybe_sequence_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Maybe_sequence_patternContext,0)


        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def open_sequence_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Open_sequence_patternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_sequence_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSequence_pattern" ):
                listener.enterSequence_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSequence_pattern" ):
                listener.exitSequence_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSequence_pattern" ):
                return visitor.visitSequence_pattern(self)
            else:
                return visitor.visitChildren(self)




    def sequence_pattern(self):

        localctx = Python3Parser.Sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_sequence_pattern)
        self._la = 0 # Token type
        try:
            self.state = 958
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 948
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 950
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)))) != 0):
                    self.state = 949
                    self.maybe_sequence_pattern()


                self.state = 952
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token in [Python3Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 953
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 955
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)))) != 0):
                    self.state = 954
                    self.open_sequence_pattern()


                self.state = 957
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Open_sequence_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maybe_star_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Maybe_star_patternContext,0)


        def COMMA(self):
            return self.getToken(Python3Parser.COMMA, 0)

        def maybe_sequence_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Maybe_sequence_patternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_open_sequence_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpen_sequence_pattern" ):
                listener.enterOpen_sequence_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpen_sequence_pattern" ):
                listener.exitOpen_sequence_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpen_sequence_pattern" ):
                return visitor.visitOpen_sequence_pattern(self)
            else:
                return visitor.visitChildren(self)




    def open_sequence_pattern(self):

        localctx = Python3Parser.Open_sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_open_sequence_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            self.maybe_star_pattern()
            self.state = 961
            self.match(Python3Parser.COMMA)
            self.state = 963
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)))) != 0):
                self.state = 962
                self.maybe_sequence_pattern()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Maybe_sequence_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maybe_star_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Maybe_star_patternContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Maybe_star_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_maybe_sequence_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaybe_sequence_pattern" ):
                listener.enterMaybe_sequence_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaybe_sequence_pattern" ):
                listener.exitMaybe_sequence_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaybe_sequence_pattern" ):
                return visitor.visitMaybe_sequence_pattern(self)
            else:
                return visitor.visitChildren(self)




    def maybe_sequence_pattern(self):

        localctx = Python3Parser.Maybe_sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_maybe_sequence_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            self.maybe_star_pattern()
            self.state = 970
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,120,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 966
                    self.match(Python3Parser.COMMA)
                    self.state = 967
                    self.maybe_star_pattern() 
                self.state = 972
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,120,self._ctx)

            self.state = 974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 973
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Maybe_star_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Star_patternContext,0)


        def pattern(self):
            return self.getTypedRuleContext(Python3Parser.PatternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_maybe_star_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaybe_star_pattern" ):
                listener.enterMaybe_star_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaybe_star_pattern" ):
                listener.exitMaybe_star_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaybe_star_pattern" ):
                return visitor.visitMaybe_star_pattern(self)
            else:
                return visitor.visitChildren(self)




    def maybe_star_pattern(self):

        localctx = Python3Parser.Maybe_star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_maybe_star_pattern)
        try:
            self.state = 978
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 976
                self.star_pattern()
                pass
            elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.FALSE, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.MINUS, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 977
                self.pattern()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(Python3Parser.Pattern_capture_targetContext,0)


        def wildcard_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Wildcard_patternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_star_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_pattern" ):
                listener.enterStar_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_pattern" ):
                listener.exitStar_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_pattern" ):
                return visitor.visitStar_pattern(self)
            else:
                return visitor.visitChildren(self)




    def star_pattern(self):

        localctx = Python3Parser.Star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_star_pattern)
        try:
            self.state = 984
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 980
                self.match(Python3Parser.STAR)
                self.state = 981
                self.pattern_capture_target()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 982
                self.match(Python3Parser.STAR)
                self.state = 983
                self.wildcard_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Mapping_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACE(self):
            return self.getToken(Python3Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(Python3Parser.CLOSE_BRACE, 0)

        def double_star_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Double_star_patternContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def items_pattern(self):
            return self.getTypedRuleContext(Python3Parser.Items_patternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_mapping_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping_pattern" ):
                listener.enterMapping_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping_pattern" ):
                listener.exitMapping_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapping_pattern" ):
                return visitor.visitMapping_pattern(self)
            else:
                return visitor.visitChildren(self)




    def mapping_pattern(self):

        localctx = Python3Parser.Mapping_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_mapping_pattern)
        self._la = 0 # Token type
        try:
            self.state = 1011
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 986
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 987
                self.match(Python3Parser.CLOSE_BRACE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 988
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 989
                self.double_star_pattern()
                self.state = 991
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 990
                    self.match(Python3Parser.COMMA)


                self.state = 993
                self.match(Python3Parser.CLOSE_BRACE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 995
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 996
                self.items_pattern()
                self.state = 997
                self.match(Python3Parser.COMMA)
                self.state = 998
                self.double_star_pattern()
                self.state = 1000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 999
                    self.match(Python3Parser.COMMA)


                self.state = 1002
                self.match(Python3Parser.CLOSE_BRACE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1004
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 1005
                self.items_pattern()
                self.state = 1007
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 1006
                    self.match(Python3Parser.COMMA)


                self.state = 1009
                self.match(Python3Parser.CLOSE_BRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Items_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def key_value_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Key_value_patternContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Key_value_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_items_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItems_pattern" ):
                listener.enterItems_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItems_pattern" ):
                listener.exitItems_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitItems_pattern" ):
                return visitor.visitItems_pattern(self)
            else:
                return visitor.visitChildren(self)




    def items_pattern(self):

        localctx = Python3Parser.Items_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_items_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1013
            self.key_value_pattern()
            self.state = 1018
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1014
                    self.match(Python3Parser.COMMA)
                    self.state = 1015
                    self.key_value_pattern() 
                self.state = 1020
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Key_value_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def pattern(self):
            return self.getTypedRuleContext(Python3Parser.PatternContext,0)


        def literal_expr(self):
            return self.getTypedRuleContext(Python3Parser.Literal_exprContext,0)


        def attr(self):
            return self.getTypedRuleContext(Python3Parser.AttrContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_key_value_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_value_pattern" ):
                listener.enterKey_value_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_value_pattern" ):
                listener.exitKey_value_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKey_value_pattern" ):
                return visitor.visitKey_value_pattern(self)
            else:
                return visitor.visitChildren(self)




    def key_value_pattern(self):

        localctx = Python3Parser.Key_value_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_key_value_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1023
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.FALSE, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.MINUS]:
                self.state = 1021
                self.literal_expr()
                pass
            elif token in [Python3Parser.MATCH, Python3Parser.UNDERSCORE, Python3Parser.NAME]:
                self.state = 1022
                self.attr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1025
            self.match(Python3Parser.COLON)
            self.state = 1026
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Double_star_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(Python3Parser.Pattern_capture_targetContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_double_star_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDouble_star_pattern" ):
                listener.enterDouble_star_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDouble_star_pattern" ):
                listener.exitDouble_star_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDouble_star_pattern" ):
                return visitor.visitDouble_star_pattern(self)
            else:
                return visitor.visitChildren(self)




    def double_star_pattern(self):

        localctx = Python3Parser.Double_star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_double_star_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            self.match(Python3Parser.POWER)
            self.state = 1029
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_or_attr(self):
            return self.getTypedRuleContext(Python3Parser.Name_or_attrContext,0)


        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def positional_patterns(self):
            return self.getTypedRuleContext(Python3Parser.Positional_patternsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def keyword_patterns(self):
            return self.getTypedRuleContext(Python3Parser.Keyword_patternsContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_class_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_pattern" ):
                listener.enterClass_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_pattern" ):
                listener.exitClass_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_pattern" ):
                return visitor.visitClass_pattern(self)
            else:
                return visitor.visitChildren(self)




    def class_pattern(self):

        localctx = Python3Parser.Class_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_class_pattern)
        self._la = 0 # Token type
        try:
            self.state = 1061
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1031
                self.name_or_attr()
                self.state = 1032
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1033
                self.match(Python3Parser.CLOSE_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1035
                self.name_or_attr()
                self.state = 1036
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1037
                self.positional_patterns()
                self.state = 1039
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 1038
                    self.match(Python3Parser.COMMA)


                self.state = 1041
                self.match(Python3Parser.CLOSE_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1043
                self.name_or_attr()
                self.state = 1044
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1045
                self.keyword_patterns()
                self.state = 1047
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 1046
                    self.match(Python3Parser.COMMA)


                self.state = 1049
                self.match(Python3Parser.CLOSE_PAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1051
                self.name_or_attr()
                self.state = 1052
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1053
                self.positional_patterns()
                self.state = 1054
                self.match(Python3Parser.COMMA)
                self.state = 1055
                self.keyword_patterns()
                self.state = 1057
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 1056
                    self.match(Python3Parser.COMMA)


                self.state = 1059
                self.match(Python3Parser.CLOSE_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Positional_patternsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.PatternContext)
            else:
                return self.getTypedRuleContext(Python3Parser.PatternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_positional_patterns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositional_patterns" ):
                listener.enterPositional_patterns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositional_patterns" ):
                listener.exitPositional_patterns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositional_patterns" ):
                return visitor.visitPositional_patterns(self)
            else:
                return visitor.visitChildren(self)




    def positional_patterns(self):

        localctx = Python3Parser.Positional_patternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_positional_patterns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1063
            self.pattern()
            self.state = 1068
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,134,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1064
                    self.match(Python3Parser.COMMA)
                    self.state = 1065
                    self.pattern() 
                self.state = 1070
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Keyword_patternsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Keyword_patternContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Keyword_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_keyword_patterns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword_patterns" ):
                listener.enterKeyword_patterns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword_patterns" ):
                listener.exitKeyword_patterns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword_patterns" ):
                return visitor.visitKeyword_patterns(self)
            else:
                return visitor.visitChildren(self)




    def keyword_patterns(self):

        localctx = Python3Parser.Keyword_patternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_keyword_patterns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1071
            self.keyword_pattern()
            self.state = 1076
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1072
                    self.match(Python3Parser.COMMA)
                    self.state = 1073
                    self.keyword_pattern() 
                self.state = 1078
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Keyword_patternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def ASSIGN(self):
            return self.getToken(Python3Parser.ASSIGN, 0)

        def pattern(self):
            return self.getTypedRuleContext(Python3Parser.PatternContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_keyword_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword_pattern" ):
                listener.enterKeyword_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword_pattern" ):
                listener.exitKeyword_pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword_pattern" ):
                return visitor.visitKeyword_pattern(self)
            else:
                return visitor.visitChildren(self)




    def keyword_pattern(self):

        localctx = Python3Parser.Keyword_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_keyword_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1079
            self.name()
            self.state = 1080
            self.match(Python3Parser.ASSIGN)
            self.state = 1081
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Or_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Or_testContext,i)


        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def lambdef(self):
            return self.getTypedRuleContext(Python3Parser.LambdefContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest" ):
                listener.enterTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest" ):
                listener.exitTest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest" ):
                return visitor.visitTest(self)
            else:
                return visitor.visitChildren(self)




    def test(self):

        localctx = Python3Parser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_test)
        self._la = 0 # Token type
        try:
            self.state = 1092
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1083
                self.or_test()
                self.state = 1089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.IF:
                    self.state = 1084
                    self.match(Python3Parser.IF)
                    self.state = 1085
                    self.or_test()
                    self.state = 1086
                    self.match(Python3Parser.ELSE)
                    self.state = 1087
                    self.test()


                pass
            elif token in [Python3Parser.LAMBDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1091
                self.lambdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Test_nocondContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self):
            return self.getTypedRuleContext(Python3Parser.Or_testContext,0)


        def lambdef_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Lambdef_nocondContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_test_nocond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest_nocond" ):
                listener.enterTest_nocond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest_nocond" ):
                listener.exitTest_nocond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest_nocond" ):
                return visitor.visitTest_nocond(self)
            else:
                return visitor.visitChildren(self)




    def test_nocond(self):

        localctx = Python3Parser.Test_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_test_nocond)
        try:
            self.state = 1096
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1094
                self.or_test()
                pass
            elif token in [Python3Parser.LAMBDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1095
                self.lambdef_nocond()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(Python3Parser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(Python3Parser.VarargslistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_lambdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdef" ):
                listener.enterLambdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdef" ):
                listener.exitLambdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdef" ):
                return visitor.visitLambdef(self)
            else:
                return visitor.visitChildren(self)




    def lambdef(self):

        localctx = Python3Parser.LambdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_lambdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1098
            self.match(Python3Parser.LAMBDA)
            self.state = 1100
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.MATCH) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0):
                self.state = 1099
                self.varargslist()


            self.state = 1102
            self.match(Python3Parser.COLON)
            self.state = 1103
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambdef_nocondContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(Python3Parser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Test_nocondContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(Python3Parser.VarargslistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_lambdef_nocond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdef_nocond" ):
                listener.enterLambdef_nocond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdef_nocond" ):
                listener.exitLambdef_nocond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdef_nocond" ):
                return visitor.visitLambdef_nocond(self)
            else:
                return visitor.visitChildren(self)




    def lambdef_nocond(self):

        localctx = Python3Parser.Lambdef_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_lambdef_nocond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1105
            self.match(Python3Parser.LAMBDA)
            self.state = 1107
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.MATCH) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0):
                self.state = 1106
                self.varargslist()


            self.state = 1109
            self.match(Python3Parser.COLON)
            self.state = 1110
            self.test_nocond()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Or_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.And_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.And_testContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.OR)
            else:
                return self.getToken(Python3Parser.OR, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_or_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_test" ):
                listener.enterOr_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_test" ):
                listener.exitOr_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_test" ):
                return visitor.visitOr_test(self)
            else:
                return visitor.visitChildren(self)




    def or_test(self):

        localctx = Python3Parser.Or_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_or_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1112
            self.and_test()
            self.state = 1117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.OR:
                self.state = 1113
                self.match(Python3Parser.OR)
                self.state = 1114
                self.and_test()
                self.state = 1119
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class And_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def not_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Not_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Not_testContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.AND)
            else:
                return self.getToken(Python3Parser.AND, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_and_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_test" ):
                listener.enterAnd_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_test" ):
                listener.exitAnd_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_test" ):
                return visitor.visitAnd_test(self)
            else:
                return visitor.visitChildren(self)




    def and_test(self):

        localctx = Python3Parser.And_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_and_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1120
            self.not_test()
            self.state = 1125
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.AND:
                self.state = 1121
                self.match(Python3Parser.AND)
                self.state = 1122
                self.not_test()
                self.state = 1127
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Not_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(Python3Parser.NOT, 0)

        def not_test(self):
            return self.getTypedRuleContext(Python3Parser.Not_testContext,0)


        def comparison(self):
            return self.getTypedRuleContext(Python3Parser.ComparisonContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_not_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_test" ):
                listener.enterNot_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_test" ):
                listener.exitNot_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNot_test" ):
                return visitor.visitNot_test(self)
            else:
                return visitor.visitChildren(self)




    def not_test(self):

        localctx = Python3Parser.Not_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_not_test)
        try:
            self.state = 1131
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1128
                self.match(Python3Parser.NOT)
                self.state = 1129
                self.not_test()
                pass
            elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1130
                self.comparison()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext,i)


        def comp_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Comp_opContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Comp_opContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)




    def comparison(self):

        localctx = Python3Parser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_comparison)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1133
            self.expr()
            self.state = 1139
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,144,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1134
                    self.comp_op()
                    self.state = 1135
                    self.expr() 
                self.state = 1141
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,144,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_THAN(self):
            return self.getToken(Python3Parser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(Python3Parser.GREATER_THAN, 0)

        def EQUALS(self):
            return self.getToken(Python3Parser.EQUALS, 0)

        def GT_EQ(self):
            return self.getToken(Python3Parser.GT_EQ, 0)

        def LT_EQ(self):
            return self.getToken(Python3Parser.LT_EQ, 0)

        def NOT_EQ_1(self):
            return self.getToken(Python3Parser.NOT_EQ_1, 0)

        def NOT_EQ_2(self):
            return self.getToken(Python3Parser.NOT_EQ_2, 0)

        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def NOT(self):
            return self.getToken(Python3Parser.NOT, 0)

        def IS(self):
            return self.getToken(Python3Parser.IS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_comp_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_op" ):
                listener.enterComp_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_op" ):
                listener.exitComp_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_op" ):
                return visitor.visitComp_op(self)
            else:
                return visitor.visitChildren(self)




    def comp_op(self):

        localctx = Python3Parser.Comp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_comp_op)
        try:
            self.state = 1155
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1142
                self.match(Python3Parser.LESS_THAN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1143
                self.match(Python3Parser.GREATER_THAN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1144
                self.match(Python3Parser.EQUALS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1145
                self.match(Python3Parser.GT_EQ)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1146
                self.match(Python3Parser.LT_EQ)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1147
                self.match(Python3Parser.NOT_EQ_1)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1148
                self.match(Python3Parser.NOT_EQ_2)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1149
                self.match(Python3Parser.IN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1150
                self.match(Python3Parser.NOT)
                self.state = 1151
                self.match(Python3Parser.IN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1152
                self.match(Python3Parser.IS)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1153
                self.match(Python3Parser.IS)
                self.state = 1154
                self.match(Python3Parser.NOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(Python3Parser.ExprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_expr" ):
                listener.enterStar_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_expr" ):
                listener.exitStar_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_expr" ):
                return visitor.visitStar_expr(self)
            else:
                return visitor.visitChildren(self)




    def star_expr(self):

        localctx = Python3Parser.Star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_star_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1157
            self.match(Python3Parser.STAR)
            self.state = 1158
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xor_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Xor_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Xor_exprContext,i)


        def OR_OP(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.OR_OP)
            else:
                return self.getToken(Python3Parser.OR_OP, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)




    def expr(self):

        localctx = Python3Parser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1160
            self.xor_expr()
            self.state = 1165
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.OR_OP:
                self.state = 1161
                self.match(Python3Parser.OR_OP)
                self.state = 1162
                self.xor_expr()
                self.state = 1167
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xor_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.And_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.And_exprContext,i)


        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.XOR)
            else:
                return self.getToken(Python3Parser.XOR, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_xor_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXor_expr" ):
                listener.enterXor_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXor_expr" ):
                listener.exitXor_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXor_expr" ):
                return visitor.visitXor_expr(self)
            else:
                return visitor.visitChildren(self)




    def xor_expr(self):

        localctx = Python3Parser.Xor_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_xor_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1168
            self.and_expr()
            self.state = 1173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.XOR:
                self.state = 1169
                self.match(Python3Parser.XOR)
                self.state = 1170
                self.and_expr()
                self.state = 1175
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class And_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Shift_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Shift_exprContext,i)


        def AND_OP(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.AND_OP)
            else:
                return self.getToken(Python3Parser.AND_OP, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_and_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_expr" ):
                listener.enterAnd_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_expr" ):
                listener.exitAnd_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_expr" ):
                return visitor.visitAnd_expr(self)
            else:
                return visitor.visitChildren(self)




    def and_expr(self):

        localctx = Python3Parser.And_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_and_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1176
            self.shift_expr()
            self.state = 1181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.AND_OP:
                self.state = 1177
                self.match(Python3Parser.AND_OP)
                self.state = 1178
                self.shift_expr()
                self.state = 1183
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Shift_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arith_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Arith_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Arith_exprContext,i)


        def LEFT_SHIFT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.LEFT_SHIFT)
            else:
                return self.getToken(Python3Parser.LEFT_SHIFT, i)

        def RIGHT_SHIFT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.RIGHT_SHIFT)
            else:
                return self.getToken(Python3Parser.RIGHT_SHIFT, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_shift_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShift_expr" ):
                listener.enterShift_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShift_expr" ):
                listener.exitShift_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShift_expr" ):
                return visitor.visitShift_expr(self)
            else:
                return visitor.visitChildren(self)




    def shift_expr(self):

        localctx = Python3Parser.Shift_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_shift_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1184
            self.arith_expr()
            self.state = 1189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.LEFT_SHIFT or _la==Python3Parser.RIGHT_SHIFT:
                self.state = 1185
                _la = self._input.LA(1)
                if not(_la==Python3Parser.LEFT_SHIFT or _la==Python3Parser.RIGHT_SHIFT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1186
                self.arith_expr()
                self.state = 1191
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Arith_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TermContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TermContext,i)


        def ADD(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ADD)
            else:
                return self.getToken(Python3Parser.ADD, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.MINUS)
            else:
                return self.getToken(Python3Parser.MINUS, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_arith_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArith_expr" ):
                listener.enterArith_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArith_expr" ):
                listener.exitArith_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArith_expr" ):
                return visitor.visitArith_expr(self)
            else:
                return visitor.visitChildren(self)




    def arith_expr(self):

        localctx = Python3Parser.Arith_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_arith_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1192
            self.term()
            self.state = 1197
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1193
                    _la = self._input.LA(1)
                    if not(_la==Python3Parser.ADD or _la==Python3Parser.MINUS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1194
                    self.term() 
                self.state = 1199
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.FactorContext)
            else:
                return self.getTypedRuleContext(Python3Parser.FactorContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.STAR)
            else:
                return self.getToken(Python3Parser.STAR, i)

        def AT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.AT)
            else:
                return self.getToken(Python3Parser.AT, i)

        def DIV(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.DIV)
            else:
                return self.getToken(Python3Parser.DIV, i)

        def MOD(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.MOD)
            else:
                return self.getToken(Python3Parser.MOD, i)

        def IDIV(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.IDIV)
            else:
                return self.getToken(Python3Parser.IDIV, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerm" ):
                return visitor.visitTerm(self)
            else:
                return visitor.visitChildren(self)




    def term(self):

        localctx = Python3Parser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1200
            self.factor()
            self.state = 1205
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1201
                    _la = self._input.LA(1)
                    if not(((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & ((1 << (Python3Parser.STAR - 56)) | (1 << (Python3Parser.DIV - 56)) | (1 << (Python3Parser.MOD - 56)) | (1 << (Python3Parser.IDIV - 56)) | (1 << (Python3Parser.AT - 56)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1202
                    self.factor() 
                self.state = 1207
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(Python3Parser.FactorContext,0)


        def ADD(self):
            return self.getToken(Python3Parser.ADD, 0)

        def MINUS(self):
            return self.getToken(Python3Parser.MINUS, 0)

        def NOT_OP(self):
            return self.getToken(Python3Parser.NOT_OP, 0)

        def power(self):
            return self.getTypedRuleContext(Python3Parser.PowerContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFactor" ):
                return visitor.visitFactor(self)
            else:
                return visitor.visitChildren(self)




    def factor(self):

        localctx = Python3Parser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_factor)
        self._la = 0 # Token type
        try:
            self.state = 1211
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1208
                _la = self._input.LA(1)
                if not(((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (Python3Parser.ADD - 71)) | (1 << (Python3Parser.MINUS - 71)) | (1 << (Python3Parser.NOT_OP - 71)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1209
                self.factor()
                pass
            elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1210
                self.power()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PowerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom_expr(self):
            return self.getTypedRuleContext(Python3Parser.Atom_exprContext,0)


        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def factor(self):
            return self.getTypedRuleContext(Python3Parser.FactorContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_power

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPower" ):
                listener.enterPower(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPower" ):
                listener.exitPower(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPower" ):
                return visitor.visitPower(self)
            else:
                return visitor.visitChildren(self)




    def power(self):

        localctx = Python3Parser.PowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_power)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1213
            self.atom_expr()
            self.state = 1216
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.POWER:
                self.state = 1214
                self.match(Python3Parser.POWER)
                self.state = 1215
                self.factor()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Atom_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(Python3Parser.AtomContext,0)


        def AWAIT(self):
            return self.getToken(Python3Parser.AWAIT, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TrailerContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TrailerContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_atom_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_expr" ):
                listener.enterAtom_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_expr" ):
                listener.exitAtom_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom_expr" ):
                return visitor.visitAtom_expr(self)
            else:
                return visitor.visitChildren(self)




    def atom_expr(self):

        localctx = Python3Parser.Atom_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_atom_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.AWAIT:
                self.state = 1218
                self.match(Python3Parser.AWAIT)


            self.state = 1221
            self.atom()
            self.state = 1225
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,155,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1222
                    self.trailer() 
                self.state = 1227
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,155,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(Python3Parser.Yield_exprContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(Python3Parser.Testlist_compContext,0)


        def OPEN_BRACK(self):
            return self.getToken(Python3Parser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(Python3Parser.CLOSE_BRACK, 0)

        def OPEN_BRACE(self):
            return self.getToken(Python3Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(Python3Parser.CLOSE_BRACE, 0)

        def dictorsetmaker(self):
            return self.getTypedRuleContext(Python3Parser.DictorsetmakerContext,0)


        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def NUMBER(self):
            return self.getToken(Python3Parser.NUMBER, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.STRING)
            else:
                return self.getToken(Python3Parser.STRING, i)

        def ELLIPSIS(self):
            return self.getToken(Python3Parser.ELLIPSIS, 0)

        def NONE(self):
            return self.getToken(Python3Parser.NONE, 0)

        def TRUE(self):
            return self.getToken(Python3Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(Python3Parser.FALSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = Python3Parser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.state = 1255
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1228
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1231
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.YIELD]:
                    self.state = 1229
                    self.yield_expr()
                    pass
                elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                    self.state = 1230
                    self.testlist_comp()
                    pass
                elif token in [Python3Parser.CLOSE_PAREN]:
                    pass
                else:
                    pass
                self.state = 1233
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [Python3Parser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1234
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 1236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.ADD - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.NOT_OP - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)))) != 0):
                    self.state = 1235
                    self.testlist_comp()


                self.state = 1238
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token in [Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1239
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 1241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.POWER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.ADD - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.NOT_OP - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)))) != 0):
                    self.state = 1240
                    self.dictorsetmaker()


                self.state = 1243
                self.match(Python3Parser.CLOSE_BRACE)
                pass
            elif token in [Python3Parser.MATCH, Python3Parser.UNDERSCORE, Python3Parser.NAME]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1244
                self.name()
                pass
            elif token in [Python3Parser.NUMBER]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1245
                self.match(Python3Parser.NUMBER)
                pass
            elif token in [Python3Parser.STRING]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1247 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1246
                        self.match(Python3Parser.STRING)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1249 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,159,self._ctx)

                pass
            elif token in [Python3Parser.ELLIPSIS]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1251
                self.match(Python3Parser.ELLIPSIS)
                pass
            elif token in [Python3Parser.NONE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1252
                self.match(Python3Parser.NONE)
                pass
            elif token in [Python3Parser.TRUE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1253
                self.match(Python3Parser.TRUE)
                pass
            elif token in [Python3Parser.FALSE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1254
                self.match(Python3Parser.FALSE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def UNDERSCORE(self):
            return self.getToken(Python3Parser.UNDERSCORE, 0)

        def MATCH(self):
            return self.getToken(Python3Parser.MATCH, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName" ):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)




    def name(self):

        localctx = Python3Parser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1257
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.MATCH) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Testlist_compContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_testlist_comp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_comp" ):
                listener.enterTestlist_comp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_comp" ):
                listener.exitTestlist_comp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_comp" ):
                return visitor.visitTestlist_comp(self)
            else:
                return visitor.visitChildren(self)




    def testlist_comp(self):

        localctx = Python3Parser.Testlist_compContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_testlist_comp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1261
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.state = 1259
                self.test()
                pass
            elif token in [Python3Parser.STAR]:
                self.state = 1260
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1277
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.ASYNC, Python3Parser.FOR]:
                self.state = 1263
                self.comp_for()
                pass
            elif token in [Python3Parser.CLOSE_PAREN, Python3Parser.COMMA, Python3Parser.CLOSE_BRACK]:
                self.state = 1271
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,163,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1264
                        self.match(Python3Parser.COMMA)
                        self.state = 1267
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                            self.state = 1265
                            self.test()
                            pass
                        elif token in [Python3Parser.STAR]:
                            self.state = 1266
                            self.star_expr()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 1273
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,163,self._ctx)

                self.state = 1275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 1274
                    self.match(Python3Parser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext,0)


        def OPEN_BRACK(self):
            return self.getToken(Python3Parser.OPEN_BRACK, 0)

        def subscriptlist(self):
            return self.getTypedRuleContext(Python3Parser.SubscriptlistContext,0)


        def CLOSE_BRACK(self):
            return self.getToken(Python3Parser.CLOSE_BRACK, 0)

        def DOT(self):
            return self.getToken(Python3Parser.DOT, 0)

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_trailer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailer" ):
                listener.enterTrailer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailer" ):
                listener.exitTrailer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailer" ):
                return visitor.visitTrailer(self)
            else:
                return visitor.visitChildren(self)




    def trailer(self):

        localctx = Python3Parser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_trailer)
        self._la = 0 # Token type
        try:
            self.state = 1290
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1279
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.POWER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.ADD - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.NOT_OP - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)))) != 0):
                    self.state = 1280
                    self.arglist()


                self.state = 1283
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [Python3Parser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1284
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 1285
                self.subscriptlist()
                self.state = 1286
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token in [Python3Parser.DOT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1288
                self.match(Python3Parser.DOT)
                self.state = 1289
                self.name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Subscript_Context)
            else:
                return self.getTypedRuleContext(Python3Parser.Subscript_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_subscriptlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscriptlist" ):
                listener.enterSubscriptlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscriptlist" ):
                listener.exitSubscriptlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscriptlist" ):
                return visitor.visitSubscriptlist(self)
            else:
                return visitor.visitChildren(self)




    def subscriptlist(self):

        localctx = Python3Parser.SubscriptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_subscriptlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1292
            self.subscript_()
            self.state = 1297
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,168,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1293
                    self.match(Python3Parser.COMMA)
                    self.state = 1294
                    self.subscript_() 
                self.state = 1299
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,168,self._ctx)

            self.state = 1301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 1300
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Subscript_Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def sliceop(self):
            return self.getTypedRuleContext(Python3Parser.SliceopContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_subscript_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript_" ):
                listener.enterSubscript_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript_" ):
                listener.exitSubscript_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript_" ):
                return visitor.visitSubscript_(self)
            else:
                return visitor.visitChildren(self)




    def subscript_(self):

        localctx = Python3Parser.Subscript_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_subscript_)
        self._la = 0 # Token type
        try:
            self.state = 1314
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1303
                self.test()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.ADD - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.NOT_OP - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)))) != 0):
                    self.state = 1304
                    self.test()


                self.state = 1307
                self.match(Python3Parser.COLON)
                self.state = 1309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.ADD - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.NOT_OP - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)))) != 0):
                    self.state = 1308
                    self.test()


                self.state = 1312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COLON:
                    self.state = 1311
                    self.sliceop()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SliceopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_sliceop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceop" ):
                listener.enterSliceop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceop" ):
                listener.exitSliceop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSliceop" ):
                return visitor.visitSliceop(self)
            else:
                return visitor.visitChildren(self)




    def sliceop(self):

        localctx = Python3Parser.SliceopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_sliceop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1316
            self.match(Python3Parser.COLON)
            self.state = 1318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.ADD - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.NOT_OP - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)))) != 0):
                self.state = 1317
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_exprlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprlist" ):
                listener.enterExprlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprlist" ):
                listener.exitExprlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprlist" ):
                return visitor.visitExprlist(self)
            else:
                return visitor.visitChildren(self)




    def exprlist(self):

        localctx = Python3Parser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_exprlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1322
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.state = 1320
                self.expr()
                pass
            elif token in [Python3Parser.STAR]:
                self.state = 1321
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1331
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,177,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1324
                    self.match(Python3Parser.COMMA)
                    self.state = 1327
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                        self.state = 1325
                        self.expr()
                        pass
                    elif token in [Python3Parser.STAR]:
                        self.state = 1326
                        self.star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1333
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,177,self._ctx)

            self.state = 1335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 1334
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_testlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist" ):
                listener.enterTestlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist" ):
                listener.exitTestlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist" ):
                return visitor.visitTestlist(self)
            else:
                return visitor.visitChildren(self)




    def testlist(self):

        localctx = Python3Parser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_testlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1337
            self.test()
            self.state = 1342
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,179,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1338
                    self.match(Python3Parser.COMMA)
                    self.state = 1339
                    self.test() 
                self.state = 1344
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,179,self._ctx)

            self.state = 1346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 1345
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DictorsetmakerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def POWER(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.POWER)
            else:
                return self.getToken(Python3Parser.POWER, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_dictorsetmaker

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictorsetmaker" ):
                listener.enterDictorsetmaker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictorsetmaker" ):
                listener.exitDictorsetmaker(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictorsetmaker" ):
                return visitor.visitDictorsetmaker(self)
            else:
                return visitor.visitChildren(self)




    def dictorsetmaker(self):

        localctx = Python3Parser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_dictorsetmaker)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1396
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.state = 1354
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                    self.state = 1348
                    self.test()
                    self.state = 1349
                    self.match(Python3Parser.COLON)
                    self.state = 1350
                    self.test()
                    pass
                elif token in [Python3Parser.POWER]:
                    self.state = 1352
                    self.match(Python3Parser.POWER)
                    self.state = 1353
                    self.expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1374
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.ASYNC, Python3Parser.FOR]:
                    self.state = 1356
                    self.comp_for()
                    pass
                elif token in [Python3Parser.COMMA, Python3Parser.CLOSE_BRACE]:
                    self.state = 1368
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,183,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1357
                            self.match(Python3Parser.COMMA)
                            self.state = 1364
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                                self.state = 1358
                                self.test()
                                self.state = 1359
                                self.match(Python3Parser.COLON)
                                self.state = 1360
                                self.test()
                                pass
                            elif token in [Python3Parser.POWER]:
                                self.state = 1362
                                self.match(Python3Parser.POWER)
                                self.state = 1363
                                self.expr()
                                pass
                            else:
                                raise NoViableAltException(self)
                     
                        self.state = 1370
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,183,self._ctx)

                    self.state = 1372
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Python3Parser.COMMA:
                        self.state = 1371
                        self.match(Python3Parser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.state = 1378
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                    self.state = 1376
                    self.test()
                    pass
                elif token in [Python3Parser.STAR]:
                    self.state = 1377
                    self.star_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1394
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.ASYNC, Python3Parser.FOR]:
                    self.state = 1380
                    self.comp_for()
                    pass
                elif token in [Python3Parser.COMMA, Python3Parser.CLOSE_BRACE]:
                    self.state = 1388
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,188,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1381
                            self.match(Python3Parser.COMMA)
                            self.state = 1384
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                                self.state = 1382
                                self.test()
                                pass
                            elif token in [Python3Parser.STAR]:
                                self.state = 1383
                                self.star_expr()
                                pass
                            else:
                                raise NoViableAltException(self)
                     
                        self.state = 1390
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,188,self._ctx)

                    self.state = 1392
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Python3Parser.COMMA:
                        self.state = 1391
                        self.match(Python3Parser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(Python3Parser.CLASS, 0)

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(Python3Parser.BlockContext,0)


        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_classdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassdef" ):
                listener.enterClassdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassdef" ):
                listener.exitClassdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassdef" ):
                return visitor.visitClassdef(self)
            else:
                return visitor.visitChildren(self)




    def classdef(self):

        localctx = Python3Parser.ClassdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_classdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1398
            self.match(Python3Parser.CLASS)
            self.state = 1399
            self.name()
            self.state = 1405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.OPEN_PAREN:
                self.state = 1400
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1402
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.POWER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.ADD - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.NOT_OP - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)))) != 0):
                    self.state = 1401
                    self.arglist()


                self.state = 1404
                self.match(Python3Parser.CLOSE_PAREN)


            self.state = 1407
            self.match(Python3Parser.COLON)
            self.state = 1408
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArglistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ArgumentContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_arglist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArglist" ):
                listener.enterArglist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArglist" ):
                listener.exitArglist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArglist" ):
                return visitor.visitArglist(self)
            else:
                return visitor.visitChildren(self)




    def arglist(self):

        localctx = Python3Parser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_arglist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1410
            self.argument()
            self.state = 1415
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,194,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1411
                    self.match(Python3Parser.COMMA)
                    self.state = 1412
                    self.argument() 
                self.state = 1417
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,194,self._ctx)

            self.state = 1419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 1418
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def ASSIGN(self):
            return self.getToken(Python3Parser.ASSIGN, 0)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument" ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = Python3Parser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1433
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                self.state = 1421
                self.test()
                self.state = 1423
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.ASYNC or _la==Python3Parser.FOR:
                    self.state = 1422
                    self.comp_for()


                pass

            elif la_ == 2:
                self.state = 1425
                self.test()
                self.state = 1426
                self.match(Python3Parser.ASSIGN)
                self.state = 1427
                self.test()
                pass

            elif la_ == 3:
                self.state = 1429
                self.match(Python3Parser.POWER)
                self.state = 1430
                self.test()
                pass

            elif la_ == 4:
                self.state = 1431
                self.match(Python3Parser.STAR)
                self.state = 1432
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_iterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def comp_if(self):
            return self.getTypedRuleContext(Python3Parser.Comp_ifContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_comp_iter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_iter" ):
                listener.enterComp_iter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_iter" ):
                listener.exitComp_iter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_iter" ):
                return visitor.visitComp_iter(self)
            else:
                return visitor.visitChildren(self)




    def comp_iter(self):

        localctx = Python3Parser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_comp_iter)
        try:
            self.state = 1437
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.ASYNC, Python3Parser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1435
                self.comp_for()
                pass
            elif token in [Python3Parser.IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1436
                self.comp_if()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_forContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Python3Parser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext,0)


        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def or_test(self):
            return self.getTypedRuleContext(Python3Parser.Or_testContext,0)


        def ASYNC(self):
            return self.getToken(Python3Parser.ASYNC, 0)

        def comp_iter(self):
            return self.getTypedRuleContext(Python3Parser.Comp_iterContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_comp_for

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_for" ):
                listener.enterComp_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_for" ):
                listener.exitComp_for(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_for" ):
                return visitor.visitComp_for(self)
            else:
                return visitor.visitChildren(self)




    def comp_for(self):

        localctx = Python3Parser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_comp_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1440
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ASYNC:
                self.state = 1439
                self.match(Python3Parser.ASYNC)


            self.state = 1442
            self.match(Python3Parser.FOR)
            self.state = 1443
            self.exprlist()
            self.state = 1444
            self.match(Python3Parser.IN)
            self.state = 1445
            self.or_test()
            self.state = 1447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.ASYNC) | (1 << Python3Parser.FOR) | (1 << Python3Parser.IF))) != 0):
                self.state = 1446
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_ifContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Test_nocondContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(Python3Parser.Comp_iterContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_comp_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_if" ):
                listener.enterComp_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_if" ):
                listener.exitComp_if(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_if" ):
                return visitor.visitComp_if(self)
            else:
                return visitor.visitChildren(self)




    def comp_if(self):

        localctx = Python3Parser.Comp_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_comp_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1449
            self.match(Python3Parser.IF)
            self.state = 1450
            self.test_nocond()
            self.state = 1452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.ASYNC) | (1 << Python3Parser.FOR) | (1 << Python3Parser.IF))) != 0):
                self.state = 1451
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Encoding_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(Python3Parser.NameContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_encoding_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEncoding_decl" ):
                listener.enterEncoding_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEncoding_decl" ):
                listener.exitEncoding_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEncoding_decl" ):
                return visitor.visitEncoding_decl(self)
            else:
                return visitor.visitChildren(self)




    def encoding_decl(self):

        localctx = Python3Parser.Encoding_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_encoding_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1454
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(Python3Parser.YIELD, 0)

        def yield_arg(self):
            return self.getTypedRuleContext(Python3Parser.Yield_argContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_yield_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_expr" ):
                listener.enterYield_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_expr" ):
                listener.exitYield_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_expr" ):
                return visitor.visitYield_expr(self)
            else:
                return visitor.visitChildren(self)




    def yield_expr(self):

        localctx = Python3Parser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_yield_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1456
            self.match(Python3Parser.YIELD)
            self.state = 1458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.STRING) | (1 << Python3Parser.NUMBER) | (1 << Python3Parser.AWAIT) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.FROM) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.MATCH) | (1 << Python3Parser.NONE) | (1 << Python3Parser.NOT) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.UNDERSCORE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.OPEN_PAREN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (Python3Parser.OPEN_BRACK - 64)) | (1 << (Python3Parser.ADD - 64)) | (1 << (Python3Parser.MINUS - 64)) | (1 << (Python3Parser.NOT_OP - 64)) | (1 << (Python3Parser.OPEN_BRACE - 64)))) != 0):
                self.state = 1457
                self.yield_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_argContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_yield_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_arg" ):
                listener.enterYield_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_arg" ):
                listener.exitYield_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_arg" ):
                return visitor.visitYield_arg(self)
            else:
                return visitor.visitChildren(self)




    def yield_arg(self):

        localctx = Python3Parser.Yield_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_yield_arg)
        try:
            self.state = 1463
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.FROM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1460
                self.match(Python3Parser.FROM)
                self.state = 1461
                self.test()
                pass
            elif token in [Python3Parser.STRING, Python3Parser.NUMBER, Python3Parser.AWAIT, Python3Parser.FALSE, Python3Parser.LAMBDA, Python3Parser.MATCH, Python3Parser.NONE, Python3Parser.NOT, Python3Parser.TRUE, Python3Parser.UNDERSCORE, Python3Parser.NAME, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1462
                self.testlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.STRING)
            else:
                return self.getToken(Python3Parser.STRING, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_strings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrings" ):
                listener.enterStrings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrings" ):
                listener.exitStrings(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrings" ):
                return visitor.visitStrings(self)
            else:
                return visitor.visitChildren(self)




    def strings(self):

        localctx = Python3Parser.StringsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_strings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1466 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1465
                self.match(Python3Parser.STRING)
                self.state = 1468 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==Python3Parser.STRING):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[60] = self.literal_pattern_sempred
        self._predicates[61] = self.literal_expr_sempred
        self._predicates[68] = self.pattern_capture_target_sempred
        self._predicates[70] = self.value_pattern_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def literal_pattern_sempred(self, localctx:Literal_patternContext, predIndex:int):
            if predIndex == 0:
                return  self.CannotBePlusMinus() 
         

    def literal_expr_sempred(self, localctx:Literal_exprContext, predIndex:int):
            if predIndex == 1:
                return  self.CannotBePlusMinus() 
         

    def pattern_capture_target_sempred(self, localctx:Pattern_capture_targetContext, predIndex:int):
            if predIndex == 2:
                return  self.CannotBeDotLpEq() 
         

    def value_pattern_sempred(self, localctx:Value_patternContext, predIndex:int):
            if predIndex == 3:
                return  self.CannotBeDotLpEq() 
         




